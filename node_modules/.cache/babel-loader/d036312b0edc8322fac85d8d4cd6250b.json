{"ast":null,"code":"import { NativeEventEmitter, NativeModules } from 'react-native';\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nlet batteryCharging = false,\n    batteryLevel = -1,\n    powerState = {};\n\nconst _readPowerState = battery => {\n  const {\n    level,\n    charging,\n    chargingtime,\n    dischargingtime\n  } = battery;\n  return {\n    batteryLevel: level,\n    lowPowerMode: false,\n    batteryState: level === 1 ? 'full' : charging ? 'charging' : 'unplugged',\n    chargingtime,\n    dischargingtime\n  };\n};\n\nexport const getMaxMemorySync = () => {\n  if (window.performance && window.performance.memory) {\n    return window.performance.memory.jsHeapSizeLimit;\n  }\n\n  return -1;\n};\nexport const getInstallReferrerSync = () => {\n  return document.referrer;\n};\nexport const isAirplaneModeSync = () => {\n  return !!navigator.onLine;\n};\nexport const getUserAgentSync = () => {\n  return window.navigator.userAgent;\n};\nexport const isLocationEnabledSync = () => {\n  return !!navigator.geolocation;\n};\nexport const getTotalMemorySync = () => {\n  if (navigator.deviceMemory) {\n    return navigator.deviceMemory * 1000000000;\n  }\n\n  return -1;\n};\nexport const getUsedMemorySync = () => {\n  if (window.performance && window.performance.memory) {\n    return window.performance.memory.usedJSHeapSize;\n  }\n\n  return -1;\n};\n\nconst init = async () => {\n  if (navigator.getBattery) {\n    const battery = await navigator.getBattery();\n    batteryCharging = battery.charging;\n    battery.addEventListener('chargingchange', () => {\n      const {\n        charging\n      } = battery;\n      batteryCharging = charging;\n      powerState = _readPowerState(battery);\n      deviceInfoEmitter.emit('RNDeviceInfo_powerStateDidChange', powerState);\n    });\n    battery.addEventListener('levelchange', () => {\n      const {\n        level\n      } = battery;\n      batteryLevel = level;\n      powerState = _readPowerState(battery);\n      deviceInfoEmitter.emit('RNDeviceInfo_batteryLevelDidChange', level);\n\n      if (level < 0.2) {\n        deviceInfoEmitter.emit('RNDeviceInfo_batteryLevelIsLow', level);\n      }\n    });\n  }\n};\n\nconst getBaseOsSync = () => {\n  const userAgent = window.navigator.userAgent,\n        platform = window.navigator.platform,\n        macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\n        windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],\n        iosPlatforms = ['iPhone', 'iPad', 'iPod'];\n  let os = platform;\n\n  if (macosPlatforms.indexOf(platform) !== -1) {\n    os = 'Mac OS';\n  } else if (iosPlatforms.indexOf(platform) !== -1) {\n    os = 'iOS';\n  } else if (windowsPlatforms.indexOf(platform) !== -1) {\n    os = 'Windows';\n  } else if (/Android/.test(userAgent)) {\n    os = 'Android';\n  } else if (!os && /Linux/.test(platform)) {\n    os = 'Linux';\n  }\n\n  return os;\n};\n\ninit();\n/**\n * react-native-web empty polyfill.\n */\n\nexport const getInstallReferrer = async () => {\n  return getInstallReferrerSync();\n};\nexport const getUserAgent = async () => {\n  return getUserAgentSync();\n};\nexport const isBatteryCharging = async () => {\n  if (navigator.getBattery) {\n    const battery = await navigator.getBattery();\n    return battery.level;\n  }\n\n  return false;\n};\nexport const isBatteryChargingSync = () => {\n  return batteryCharging;\n};\nexport const isCameraPresent = async () => {\n  if (navigator.getBattery) {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    return !!devices.find(d => d.kind === 'videoinput');\n  }\n\n  return false;\n};\nexport const isCameraPresentSync = () => {\n  console.log('[react-native-device-info] isCameraPresentSync not supported - please use isCameraPresent');\n  return false;\n};\nexport const getBatteryLevel = async () => {\n  if (navigator.getBattery) {\n    const battery = await navigator.getBattery();\n    return battery.level;\n  }\n\n  return -1;\n};\nexport const getBatteryLevelSync = () => {\n  return batteryLevel;\n};\nexport const isLocationEnabled = async () => {\n  return isLocationEnabledSync();\n};\nexport const isAirplaneMode = async () => {\n  return isAirplaneModeSync();\n};\nexport const getBaseOs = async () => {\n  return getBaseOsSync();\n};\nexport const getTotalDiskCapacity = async () => {\n  if (navigator.storage && navigator.storage.estimate) {\n    const {\n      quota\n    } = await navigator.storage.estimate();\n    return quota;\n  }\n\n  return -1;\n};\nexport const getTotalDiskCapacitySync = () => {\n  console.log('[react-native-device-info] getTotalDiskCapacitySync not supported - please use getTotalDiskCapacity');\n  return -1;\n};\nexport const getFreeDiskStorage = async () => {\n  if (navigator.storage && navigator.storage.estimate) {\n    const {\n      quota,\n      usage\n    } = await navigator.storage.estimate();\n    return quota - usage;\n  }\n\n  return -1;\n};\nexport const getFreeDiskStorageSync = () => {\n  console.log('[react-native-device-info] getFreeDiskStorageSync not supported - please use getFreeDiskStorage');\n  return -1;\n};\nexport const getMaxMemory = async () => {\n  return getMaxMemorySync();\n};\nexport const getUsedMemory = async () => {\n  return getUsedMemorySync();\n};\nexport const getTotalMemory = async () => {\n  return getTotalMemorySync();\n};\nexport const getPowerState = async () => {\n  if (navigator.getBattery) {\n    const battery = await navigator.getBattery();\n    return _readPowerState(battery);\n  }\n\n  return {};\n};\nexport const getPowerStateSync = () => {\n  return powerState;\n};","map":{"version":3,"sources":["index.js"],"names":["deviceInfoEmitter","NativeModules","batteryCharging","batteryLevel","powerState","_readPowerState","battery","dischargingtime","lowPowerMode","batteryState","level","charging","getMaxMemorySync","window","getInstallReferrerSync","document","isAirplaneModeSync","navigator","getUserAgentSync","isLocationEnabledSync","getTotalMemorySync","getUsedMemorySync","init","getBaseOsSync","userAgent","platform","macosPlatforms","windowsPlatforms","iosPlatforms","os","getInstallReferrer","getUserAgent","isBatteryCharging","isBatteryChargingSync","isCameraPresent","devices","d","isCameraPresentSync","console","getBatteryLevel","getBatteryLevelSync","isLocationEnabled","isAirplaneMode","getBaseOs","getTotalDiskCapacity","quota","getTotalDiskCapacitySync","getFreeDiskStorage","usage","getFreeDiskStorageSync","getMaxMemory","getUsedMemory","getTotalMemory","getPowerState","getPowerStateSync"],"mappings":"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","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\n\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\n\nlet batteryCharging = false,\n  batteryLevel = -1,\n  powerState = {};\n\nconst _readPowerState = (battery) => {\n  const { level, charging, chargingtime, dischargingtime } = battery;\n\n  return {\n    batteryLevel: level,\n    lowPowerMode: false,\n    batteryState: level === 1 ? 'full' : charging ? 'charging' : 'unplugged',\n    chargingtime,\n    dischargingtime,\n  };\n};\n\nexport const getMaxMemorySync = () => {\n  if (window.performance && window.performance.memory) {\n    return window.performance.memory.jsHeapSizeLimit;\n  }\n  return -1;\n};\n\nexport const getInstallReferrerSync = () => {\n  return document.referrer;\n};\n\nexport const isAirplaneModeSync = () => {\n  return !!navigator.onLine;\n};\n\nexport const getUserAgentSync = () => {\n  return window.navigator.userAgent;\n};\n\nexport const isLocationEnabledSync = () => {\n  return !!navigator.geolocation;\n};\n\nexport const getTotalMemorySync = () => {\n  if (navigator.deviceMemory) {\n    return navigator.deviceMemory * 1000000000;\n  }\n  return -1;\n};\n\nexport const getUsedMemorySync = () => {\n  if (window.performance && window.performance.memory) {\n    return window.performance.memory.usedJSHeapSize;\n  }\n  return -1;\n};\n\nconst init = async () => {\n  if (navigator.getBattery) {\n    const battery = await navigator.getBattery();\n\n    batteryCharging = battery.charging;\n\n    battery.addEventListener('chargingchange', () => {\n      const { charging } = battery;\n\n      batteryCharging = charging;\n      powerState = _readPowerState(battery);\n\n      deviceInfoEmitter.emit('RNDeviceInfo_powerStateDidChange', powerState);\n    });\n\n    battery.addEventListener('levelchange', () => {\n      const { level } = battery;\n\n      batteryLevel = level;\n      powerState = _readPowerState(battery);\n\n      deviceInfoEmitter.emit('RNDeviceInfo_batteryLevelDidChange', level);\n      if (level < 0.2) {\n        deviceInfoEmitter.emit('RNDeviceInfo_batteryLevelIsLow', level);\n      }\n    });\n  }\n};\n\nconst getBaseOsSync = () => {\n  const userAgent = window.navigator.userAgent,\n    platform = window.navigator.platform,\n    macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],\n    windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],\n    iosPlatforms = ['iPhone', 'iPad', 'iPod'];\n\n  let os = platform;\n\n  if (macosPlatforms.indexOf(platform) !== -1) {\n    os = 'Mac OS';\n  } else if (iosPlatforms.indexOf(platform) !== -1) {\n    os = 'iOS';\n  } else if (windowsPlatforms.indexOf(platform) !== -1) {\n    os = 'Windows';\n  } else if (/Android/.test(userAgent)) {\n    os = 'Android';\n  } else if (!os && /Linux/.test(platform)) {\n    os = 'Linux';\n  }\n\n  return os;\n};\n\ninit();\n/**\n * react-native-web empty polyfill.\n */\n\nexport const getInstallReferrer = async () => {\n  return getInstallReferrerSync();\n};\n\nexport const getUserAgent = async () => {\n  return getUserAgentSync();\n};\n\nexport const isBatteryCharging = async () => {\n  if (navigator.getBattery) {\n    const battery = await navigator.getBattery();\n    return battery.level;\n  }\n  return false;\n};\n\nexport const isBatteryChargingSync = () => {\n  return batteryCharging;\n};\n\nexport const isCameraPresent = async () => {\n  if (navigator.getBattery) {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    return !!devices.find((d) => d.kind === 'videoinput');\n  }\n  return false;\n};\n\nexport const isCameraPresentSync = () => {\n  console.log(\n    '[react-native-device-info] isCameraPresentSync not supported - please use isCameraPresent'\n  );\n  return false;\n};\n\nexport const getBatteryLevel = async () => {\n  if (navigator.getBattery) {\n    const battery = await navigator.getBattery();\n    return battery.level;\n  }\n  return -1;\n};\n\nexport const getBatteryLevelSync = () => {\n  return batteryLevel;\n};\n\nexport const isLocationEnabled = async () => {\n  return isLocationEnabledSync();\n};\n\nexport const isAirplaneMode = async () => {\n  return isAirplaneModeSync();\n};\n\nexport const getBaseOs = async () => {\n  return getBaseOsSync();\n};\n\nexport const getTotalDiskCapacity = async () => {\n  if (navigator.storage && navigator.storage.estimate) {\n    const { quota } = await navigator.storage.estimate();\n    return quota;\n  }\n  return -1;\n};\n\nexport const getTotalDiskCapacitySync = () => {\n  console.log(\n    '[react-native-device-info] getTotalDiskCapacitySync not supported - please use getTotalDiskCapacity'\n  );\n  return -1;\n};\n\nexport const getFreeDiskStorage = async () => {\n  if (navigator.storage && navigator.storage.estimate) {\n    const { quota, usage } = await navigator.storage.estimate();\n    return quota - usage;\n  }\n  return -1;\n};\n\nexport const getFreeDiskStorageSync = () => {\n  console.log(\n    '[react-native-device-info] getFreeDiskStorageSync not supported - please use getFreeDiskStorage'\n  );\n  return -1;\n};\n\nexport const getMaxMemory = async () => {\n  return getMaxMemorySync();\n};\n\nexport const getUsedMemory = async () => {\n  return getUsedMemorySync();\n};\n\nexport const getTotalMemory = async () => {\n  return getTotalMemorySync();\n};\n\nexport const getPowerState = async () => {\n  if (navigator.getBattery) {\n    const battery = await navigator.getBattery();\n\n    return _readPowerState(battery);\n  }\n  return {};\n};\n\nexport const getPowerStateSync = () => {\n  return powerState;\n};\n"]},"metadata":{},"sourceType":"module"}