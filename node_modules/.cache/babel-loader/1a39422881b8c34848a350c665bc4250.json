{"ast":null,"code":"import api from './api';\nimport { User } from './';\nimport { getAuthKey } from '../util/';\nconst games = [{\n  id: 1206,\n  name: 'BTI体育',\n  betting_key: 'bti'\n}, {\n  id: 1201,\n  name: 'IM体育',\n  betting_key: 'im'\n}, {\n  id: 1211,\n  name: '沙巴体育'\n}, {\n  id: 1204,\n  name: 'AG真人',\n  betting_key: 'ag'\n}, {\n  id: 1209,\n  name: 'EB真人'\n}, {\n  id: 1208,\n  name: 'IM电竞'\n}, {\n  id: 1205,\n  name: '开元棋牌'\n}, {\n  id: 1207,\n  name: 'CQ电子'\n}, {\n  id: 1202,\n  name: 'PT电子'\n}, {\n  id: 1203,\n  name: 'MG电子'\n}];\nexport default {\n  list: () => games,\n  activate: params => api.post('newpwa/ajax_data.php', {\n    type: 'active',\n    auth: getAuthKey(),\n    ...params\n  }),\n  activateListV1: params => api.post('newpwa/ajax_data.php', {\n    type: 'transfer_list_v1',\n    auth: getAuthKey(),\n    ...params\n  }),\n  login: params => api.post('newpwa/center.php', {\n    submit_type: 'game_mobile_login',\n    auth: getAuthKey(),\n    ...params\n  }),\n  // balance: params => {\n  // \tconst path = 'newpwa/ajax_data.php/index.php';\n  // \tconst _params = {\n  // \t\ttype: 'get_balance',\n  // \t\tauth: getAuthKey(),\n  // \t\t...params\n  // \t};\n  // \tconst req = api.post(path, {\n  // \t\tgameid: params.id,\n  // \t\t..._params,\n  // \t}, {\n  // \t\tdone: (response, resolve) => resolve({ game, balance: + response.info }),\n  // \t\tfail: (response, reject) => reject(`Unable to get game ${params.id} balance: ${response}`)\n  // \t});\n  // },\n  balances: params => {\n    const path = 'newpwa/ajax_data.php/index.php';\n    const _params = {\n      type: 'get_balance',\n      auth: getAuthKey(),\n      ...params\n    };\n    return new Promise((resolve, reject) => {\n      const promises = games.map(game => {\n        const req = api.post(path, {\n          gameid: game.id,\n          ..._params\n        }, {\n          done: (response, resolve) => resolve({\n            game,\n            balance: +response.info\n          }),\n          // fail: (response, reject) => reject(`Unable to get game ${game.id} (${game.name}) balance: ${response}`)\n          fail: (response, reject, resolve) => resolve({\n            game,\n            balance: 0,\n            error: `Unable to get game ${game.id} (${game.name}) balance: ${response}`\n          })\n        });\n        return req.promise;\n      });\n      Promise.all(promises).then(values => resolve(values));\n    });\n  },\n  transfer: params => {\n    const _transfer = _params => api.post('newpwa/center.php/index.php', {\n      submit_type: 'transfer',\n      auth: getAuthKey(),\n      ..._params\n    });\n\n    if (params.from === 0) {\n      return _transfer({ ...params,\n        transfer_type: `${params.to}01`\n      }).promise;\n    }\n\n    if (params.to === 0) {\n      return _transfer({ ...params,\n        transfer_type: `${params.from}02`\n      }).promise;\n    }\n\n    return new Promise((resolve, reject) => {\n      _transfer({ ...params,\n        transfer_type: `${params.from}02`\n      }).promise.then(r => {\n        console.log(r);\n\n        _transfer({ ...params,\n          transfer_type: `${params.to}01`\n        }).promise.then(r => {\n          console.log(r);\n          resolve({\n            r,\n            message: 'Money transfer completed successfully'\n          });\n        }, e => reject({\n          e,\n          message: 'Failed to send money to the game'\n        }));\n      }, e => reject({\n        e,\n        message: 'Failed to withdraw money from the game'\n      }));\n    });\n  },\n  transferToWallet: () => api.post('newpwa/center.php/index.php', {\n    submit_type: 'all_transfer_out',\n    ...User.read(),\n    auth: getAuthKey()\n  }),\n  getBettingHistory: params => api.post('newpwa/record.php/index.php', {\n    auth: getAuthKey(),\n    ...params\n  }),\n  checkMaintained: params => api.post('newpwa/lobby_login.php', {\n    auth: getAuthKey(),\n    ...params\n  })\n};","map":{"version":3,"sources":["/Users/cramj/Documents/New PWA/GIT/src/service/Game.js"],"names":["api","User","getAuthKey","games","id","name","betting_key","list","activate","params","post","type","auth","activateListV1","login","submit_type","balances","path","_params","Promise","resolve","reject","promises","map","game","req","gameid","done","response","balance","info","fail","error","promise","all","then","values","transfer","_transfer","from","transfer_type","to","r","console","log","message","e","transferToWallet","read","getBettingHistory","checkMaintained"],"mappings":"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","sourcesContent":["import api from './api';\r\n\r\nimport { User } from './';\r\nimport { getAuthKey } from '../util/';\r\n\r\nconst games = [\r\n\t{ id: 1206, name: 'BTI体育', betting_key: 'bti' },\r\n\t{ id: 1201, name: 'IM体育', betting_key: 'im' },\r\n\t{ id: 1211, name: '沙巴体育' },\r\n\t{ id: 1204, name: 'AG真人', betting_key: 'ag' },\r\n\t{ id: 1209, name: 'EB真人' },\r\n\t{ id: 1208, name: 'IM电竞', },\r\n\t{ id: 1205, name: '开元棋牌' },\r\n\t{ id: 1207, name: 'CQ电子' },\r\n\t{ id: 1202, name: 'PT电子' },\r\n\t{ id: 1203, name: 'MG电子' },\r\n];\r\n\r\nexport default {\r\n\r\n\tlist: () => games,\r\n\r\n\tactivate: params => api.post('newpwa/ajax_data.php', {\r\n\t\ttype: 'active',\r\n\t\tauth: getAuthKey(),\r\n\t\t...params,\r\n\t}),\r\n\r\n\tactivateListV1: params => api.post('newpwa/ajax_data.php', {\r\n\t\ttype: 'transfer_list_v1',\r\n\t\tauth: getAuthKey(),\r\n\t\t...params,\r\n\t}),\r\n\r\n\tlogin: params => api.post('newpwa/center.php', {\r\n\t\tsubmit_type: 'game_mobile_login',\r\n\t\tauth: getAuthKey(),\r\n\t\t...params,\r\n\t}),\r\n\r\n\t// balance: params => {\r\n\r\n\t// \tconst path = 'newpwa/ajax_data.php/index.php';\r\n\r\n\t// \tconst _params = {\r\n\t// \t\ttype: 'get_balance',\r\n\t// \t\tauth: getAuthKey(),\r\n\t// \t\t...params\r\n\t// \t};\r\n\r\n\t// \tconst req = api.post(path, {\r\n\t// \t\tgameid: params.id,\r\n\t// \t\t..._params,\r\n\t// \t}, {\r\n\t// \t\tdone: (response, resolve) => resolve({ game, balance: + response.info }),\r\n\t// \t\tfail: (response, reject) => reject(`Unable to get game ${params.id} balance: ${response}`)\r\n\t// \t});\r\n\r\n\t// },\r\n\r\n\tbalances: params => {\r\n\r\n\t\tconst path = 'newpwa/ajax_data.php/index.php';\r\n\r\n\t\tconst _params = {\r\n\t\t\ttype: 'get_balance',\r\n\t\t\tauth: getAuthKey(),\r\n\t\t\t...params\r\n\t\t};\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\tconst promises = games.map(game => {\r\n\r\n\t\t\t\tconst req = api.post(path, {\r\n\t\t\t\t\tgameid: game.id,\r\n\t\t\t\t\t..._params,\r\n\t\t\t\t}, {\r\n\t\t\t\t\tdone: (response, resolve) => resolve({ game, balance: + response.info }),\r\n\t\t\t\t\t// fail: (response, reject) => reject(`Unable to get game ${game.id} (${game.name}) balance: ${response}`)\r\n\t\t\t\t\tfail: (response, reject, resolve) => resolve({ game, balance: 0, error: `Unable to get game ${game.id} (${game.name}) balance: ${response}` })\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn req.promise;\r\n\r\n\t\t\t});\r\n\r\n\t\t\tPromise.all(promises).then(values => resolve(values));\r\n\r\n\t\t});\r\n\r\n\t},\r\n\r\n\ttransfer: params => {\r\n\r\n\t\tconst _transfer = _params => api.post('newpwa/center.php/index.php', {\r\n\t\t\tsubmit_type: 'transfer',\r\n\t\t\tauth: getAuthKey(),\r\n\t\t\t..._params\r\n\t\t})\r\n\r\n\t\tif (params.from === 0) {\r\n\t\t\treturn _transfer({ ...params, transfer_type: `${params.to}01` }).promise;\r\n\t\t}\r\n\r\n\t\tif (params.to === 0) {\r\n\t\t\treturn _transfer({ ...params, transfer_type: `${params.from}02` }).promise;\r\n\t\t}\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\r\n\t\t\t_transfer({\r\n\t\t\t\t...params,\r\n\t\t\t\ttransfer_type: `${params.from}02`,\r\n\t\t\t}).promise.then(r => {\r\n\r\n\t\t\t\tconsole.log(r);\r\n\r\n\t\t\t\t_transfer({\r\n\t\t\t\t\t...params,\r\n\t\t\t\t\ttransfer_type: `${params.to}01`,\r\n\t\t\t\t}).promise.then(r => {\r\n\r\n\t\t\t\t\tconsole.log(r);\r\n\r\n\t\t\t\t\tresolve({ r, message: 'Money transfer completed successfully' });\r\n\r\n\t\t\t\t}, e => reject({ e, message: 'Failed to send money to the game' }));\r\n\r\n\t\t\t}, e => reject({ e, message: 'Failed to withdraw money from the game' }));\r\n\r\n\t\t});\r\n\r\n\t},\r\n\r\n\ttransferToWallet: () => api.post('newpwa/center.php/index.php', {\r\n\t\tsubmit_type: 'all_transfer_out',\r\n\t\t...User.read(),\r\n\t\tauth: getAuthKey(),\r\n\t}),\r\n\r\n\tgetBettingHistory: params => api.post('newpwa/record.php/index.php', {\r\n\t\tauth: getAuthKey(),\r\n\t\t...params,\r\n\t}),\r\n\r\n\tcheckMaintained: params => api.post('newpwa/lobby_login.php', {\r\n\t\tauth: getAuthKey(),\r\n\t\t...params,\r\n\t}),\r\n\r\n\r\n\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"module"}