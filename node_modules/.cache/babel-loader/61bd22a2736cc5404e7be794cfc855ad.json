{"ast":null,"code":"var _jsxFileName = \"/Users/cramj/Documents/New PWA/GIT/src/pwa/view/profile/UploadAvatar.js\";\nimport React from \"react\";\nimport ReactCrop from \"react-image-crop\";\n\nclass CropDemo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentWillReceiveProps = nextProps => {\n      const {\n        src\n      } = nextProps;\n\n      if (!src) {\n        this.setState({\n          croppedImageUrl: null\n        });\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = async crop => {\n      if (this.imageRef && crop.width && crop.height) {\n        const croppedImageUrl = await this.onGetCropImg(this.imageRef, crop, \"newFile.jpeg\");\n        this.setState({\n          croppedImageUrl\n        }); // console.log(croppedImageUrl)\n      }\n    };\n\n    this.onGetCropImg = (image, crop, fileName) => {\n      const canvas = document.createElement(\"canvas\");\n      const scaleX = image.naturalWidth / image.width;\n      const scaleY = image.naturalHeight / image.height;\n      canvas.width = 350;\n      canvas.height = 350;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, 350, 350);\n      return new Promise((resolve, reject) => {\n        canvas.toBlob(blob => {\n          if (!blob) {\n            // reject(new Error('Canvas is empty'));\n            console.error(\"Canvas is empty\");\n            return;\n          }\n\n          blob.name = fileName;\n          window.URL.revokeObjectURL(this.fileUrl);\n          this.fileUrl = window.URL.createObjectURL(blob);\n          console.warn(\"he\", blob.size); // resolve(this.fileUrl);\n\n          resolve(blob); // resolve(canvas.toDataURL('image/jpeg'));\n          // console.log(canvas.toDataURL('image/jpeg'))\n        }, \"image/jpeg\");\n      });\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      this.setState({\n        crop\n      });\n    };\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n          this.setState({\n            image: reader.result\n          });\n        });\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.ScanNow = () => {\n      this.inputFile.click();\n    };\n\n    this.CropNow = () => {\n      this.props.onCrop(this.state.croppedImageUrl);\n    };\n\n    this.onSendBack = () => {\n      const {\n        updateCustomPhoto\n      } = this.props;\n      const {\n        croppedImageUrl\n      } = this.state;\n\n      if (croppedImageUrl) {\n        updateCustomPhoto(croppedImageUrl, \"custom\");\n      }\n    };\n\n    this.state = {\n      image: null,\n      crop: {\n        width: 90,\n        aspect: 1 / 1,\n        unit: \"%\"\n      },\n      croppedImageUrl: null\n    };\n    this.inputFile = React.createRef();\n  }\n\n  render() {\n    const {\n      onClose,\n      src\n    } = this.props;\n    const {\n      crop\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-custom-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-custom-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-custom-image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(ReactCrop, {\n      src: src,\n      crop: crop,\n      onImageLoaded: this.onImageLoaded,\n      onComplete: this.onCropComplete,\n      onChange: this.onCropChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-custom-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, \"\\u53D6\\u6D88\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"active\",\n      onClick: () => this.onSendBack(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, \"\\u4FDD\\u5B58\"))));\n  }\n\n}\n\nexport default CropDemo;","map":{"version":3,"sources":["/Users/cramj/Documents/New PWA/GIT/src/pwa/view/profile/UploadAvatar.js"],"names":["React","ReactCrop","CropDemo","Component","constructor","props","componentWillReceiveProps","nextProps","src","setState","croppedImageUrl","onImageLoaded","image","imageRef","onCropComplete","crop","width","height","onGetCropImg","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","warn","size","onCropChange","percentCrop","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","ScanNow","inputFile","click","CropNow","onCrop","state","onSendBack","updateCustomPhoto","aspect","unit","createRef","render","onClose"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\nclass CropDemo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      image: null,\r\n      crop: {\r\n        width: 90,\r\n        aspect: 1 / 1,\r\n        unit: \"%\",\r\n      },\r\n      croppedImageUrl: null,\r\n    };\r\n    this.inputFile = React.createRef();\r\n  }\r\n\r\n  componentWillReceiveProps = (nextProps) => {\r\n    const { src } = nextProps;\r\n    if (!src) {\r\n      this.setState({\r\n        croppedImageUrl: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  onImageLoaded = (image) => {\r\n    this.imageRef = image;\r\n  };\r\n\r\n  onCropComplete = async (crop) => {\r\n    if (this.imageRef && crop.width && crop.height) {\r\n      const croppedImageUrl = await this.onGetCropImg(\r\n        this.imageRef,\r\n        crop,\r\n        \"newFile.jpeg\"\r\n      );\r\n      this.setState({ croppedImageUrl });\r\n      // console.log(croppedImageUrl)\r\n    }\r\n  };\r\n\r\n  onGetCropImg = (image, crop, fileName) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    canvas.width = 350;\r\n    canvas.height = 350;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      350,\r\n      350\r\n    );\r\n    return new Promise((resolve, reject) => {\r\n      canvas.toBlob((blob) => {\r\n        if (!blob) {\r\n          // reject(new Error('Canvas is empty'));\r\n          console.error(\"Canvas is empty\");\r\n          return;\r\n        }\r\n        blob.name = fileName;\r\n        window.URL.revokeObjectURL(this.fileUrl);\r\n        this.fileUrl = window.URL.createObjectURL(blob);\r\n        console.warn(\"he\", blob.size);\r\n        // resolve(this.fileUrl);\r\n        resolve(blob);\r\n        // resolve(canvas.toDataURL('image/jpeg'));\r\n        // console.log(canvas.toDataURL('image/jpeg'))\r\n      }, \"image/jpeg\");\r\n    });\r\n  };\r\n\r\n  onCropChange = (crop, percentCrop) => {\r\n    this.setState({ crop });\r\n  };\r\n\r\n  onSelectFile = (e) => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader();\r\n      reader.addEventListener(\"load\", () => {\r\n        this.setState({ image: reader.result });\r\n      });\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n  };\r\n  ScanNow = () => {\r\n    this.inputFile.click();\r\n  };\r\n\r\n  CropNow = () => {\r\n    this.props.onCrop(this.state.croppedImageUrl);\r\n  };\r\n\r\n  onSendBack = () => {\r\n    const { updateCustomPhoto } = this.props;\r\n    const { croppedImageUrl } = this.state;\r\n    if (croppedImageUrl) {\r\n      updateCustomPhoto(croppedImageUrl, \"custom\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { onClose, src } = this.props;\r\n    const { crop } = this.state;\r\n    return (\r\n      <div className=\"modal-custom-wrap\">\r\n        <div className=\"modal-custom-content\">\r\n          <div className=\"modal-custom-image\">\r\n            <ReactCrop\r\n              src={src}\r\n              crop={crop}\r\n              onImageLoaded={this.onImageLoaded}\r\n              onComplete={this.onCropComplete}\r\n              onChange={this.onCropChange}\r\n            />\r\n          </div>\r\n          <div className=\"modal-custom-buttons\">\r\n            <button onClick={onClose}>取消</button>\r\n            <button className={\"active\"} onClick={() => this.onSendBack()}>\r\n              保存\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CropDemo;\r\n"]},"metadata":{},"sourceType":"module"}