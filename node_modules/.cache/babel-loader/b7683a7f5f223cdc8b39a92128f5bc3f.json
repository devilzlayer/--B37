{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { Dimensions, NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport { useOnMount } from './internal/asyncHookWrappers';\nimport devicesWithNotch from './internal/devicesWithNotch';\nimport RNDeviceInfo from './internal/nativeInterface';\nimport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState } from './internal/types';\nlet uniqueId;\nexport function getUniqueId() {\n  if (!uniqueId) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      uniqueId = RNDeviceInfo.uniqueId;\n    } else {\n      uniqueId = 'unknown';\n    }\n  }\n\n  return uniqueId;\n}\nexport async function syncUniqueId() {\n  if (Platform.OS === 'ios') {\n    uniqueId = await RNDeviceInfo.syncUniqueId();\n  } else {\n    uniqueId = getUniqueId();\n  }\n\n  return uniqueId;\n}\nlet instanceId;\nexport async function getInstanceId() {\n  if (!instanceId) {\n    if (Platform.OS === 'android') {\n      instanceId = await RNDeviceInfo.getInstanceId();\n    } else {\n      instanceId = 'unknown';\n    }\n  }\n\n  return instanceId;\n}\nexport function getInstanceIdSync() {\n  if (!instanceId) {\n    if (Platform.OS === 'android') {\n      instanceId = RNDeviceInfo.getInstanceIdSync();\n    } else {\n      instanceId = 'unknown';\n    }\n  }\n\n  return instanceId;\n}\nlet serialNumber;\nexport async function getSerialNumber() {\n  if (!serialNumber) {\n    if (Platform.OS === 'android') {\n      serialNumber = await RNDeviceInfo.getSerialNumber();\n    } else {\n      serialNumber = 'unknown';\n    }\n  }\n\n  return serialNumber;\n}\nexport function getSerialNumberSync() {\n  if (!serialNumber) {\n    if (Platform.OS === 'android') {\n      serialNumber = RNDeviceInfo.getSerialNumberSync();\n    } else {\n      serialNumber = 'unknown';\n    }\n  }\n\n  return serialNumber;\n}\nlet androidId;\nexport async function getAndroidId() {\n  if (!androidId) {\n    if (Platform.OS === 'android') {\n      androidId = await RNDeviceInfo.getAndroidId();\n    } else {\n      androidId = 'unknown';\n    }\n  }\n\n  return androidId;\n}\nexport function getAndroidIdSync() {\n  if (!androidId) {\n    if (Platform.OS === 'android') {\n      androidId = RNDeviceInfo.getAndroidIdSync();\n    } else {\n      androidId = 'unknown';\n    }\n  }\n\n  return androidId;\n}\nexport async function getIpAddress() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n    return RNDeviceInfo.getIpAddress();\n  }\n\n  return 'unknown';\n}\nexport function getIpAddressSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n    return RNDeviceInfo.getIpAddressSync();\n  }\n\n  return 'unknown';\n}\nexport async function isCameraPresent() {\n  if (Platform.OS === 'android' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return RNDeviceInfo.isCameraPresent();\n  }\n\n  return false;\n}\nexport function isCameraPresentSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return RNDeviceInfo.isCameraPresentSync();\n  }\n\n  return false;\n}\nexport async function getMacAddress() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddress();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n\n  return 'unknown';\n}\nexport function getMacAddressSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddressSync();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n\n  return 'unknown';\n}\nlet deviceId;\nexport function getDeviceId() {\n  if (!deviceId) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      deviceId = RNDeviceInfo.deviceId;\n    } else {\n      deviceId = 'unknown';\n    }\n  }\n\n  return deviceId;\n}\nlet manufacturer;\nexport async function getManufacturer() {\n  if (!manufacturer) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows') {\n      manufacturer = await RNDeviceInfo.getSystemManufacturer();\n    } else if (Platform.OS === 'ios') {\n      manufacturer = 'Apple';\n    } else {\n      manufacturer = 'unknown';\n    }\n  }\n\n  return manufacturer;\n}\nexport function getManufacturerSync() {\n  if (!manufacturer) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows') {\n      manufacturer = RNDeviceInfo.getSystemManufacturerSync();\n    } else if (Platform.OS === 'ios') {\n      manufacturer = 'Apple';\n    } else {\n      manufacturer = 'unknown';\n    }\n  }\n\n  return manufacturer;\n}\nlet model;\nexport function getModel() {\n  if (!model) {\n    if (Platform.OS === 'ios' || Platform.OS === 'android' || Platform.OS === 'windows') {\n      model = RNDeviceInfo.model;\n    } else {\n      model = 'unknown';\n    }\n  }\n\n  return model;\n}\nlet brand;\nexport function getBrand() {\n  if (!brand) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      brand = RNDeviceInfo.brand;\n    } else {\n      brand = 'unknown';\n    }\n  }\n\n  return brand;\n}\nlet systemName;\nexport function getSystemName() {\n  if (!systemName) {\n    if (Platform.OS === 'ios') {\n      systemName = RNDeviceInfo.systemName;\n    } else if (Platform.OS === 'android') {\n      systemName = 'Android';\n    } else if (Platform.OS === 'windows') {\n      systemName = 'Windows';\n    } else {\n      systemName = 'unknown';\n    }\n  }\n\n  return systemName;\n}\nlet systemVersion;\nexport function getSystemVersion() {\n  if (!systemVersion) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      systemVersion = RNDeviceInfo.systemVersion;\n    } else {\n      systemVersion = 'unknown';\n    }\n  }\n\n  return systemVersion;\n}\nlet buildId;\nexport async function getBuildId() {\n  if (!buildId) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      buildId = await RNDeviceInfo.getBuildId();\n    } else {\n      buildId = 'unknown';\n    }\n  }\n\n  return buildId;\n}\nexport function getBuildIdSync() {\n  if (!buildId) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      buildId = RNDeviceInfo.getBuildIdSync();\n    } else {\n      buildId = 'unknown';\n    }\n  }\n\n  return buildId;\n}\nlet apiLevel;\nexport async function getApiLevel() {\n  if (!apiLevel) {\n    if (Platform.OS === 'android') {\n      apiLevel = await RNDeviceInfo.getApiLevel();\n    } else {\n      apiLevel = -1;\n    }\n  }\n\n  return apiLevel;\n}\nexport function getApiLevelSync() {\n  if (!apiLevel) {\n    if (Platform.OS === 'android') {\n      apiLevel = RNDeviceInfo.getApiLevelSync();\n    } else {\n      apiLevel = -1;\n    }\n  }\n\n  return apiLevel;\n}\nlet bundleId;\nexport function getBundleId() {\n  if (!bundleId) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      bundleId = RNDeviceInfo.bundleId;\n    } else {\n      bundleId = 'unknown';\n    }\n  }\n\n  return bundleId;\n}\nlet installerPackageName;\nexport async function getInstallerPackageName() {\n  if (!installerPackageName) {\n    if (Platform.OS === 'android') {\n      installerPackageName = await RNDeviceInfo.getInstallerPackageName();\n    } else {\n      installerPackageName = 'unknown';\n    }\n  }\n\n  return installerPackageName;\n}\nexport function getInstallerPackageNameSync() {\n  if (!installerPackageName) {\n    if (Platform.OS === 'android') {\n      installerPackageName = RNDeviceInfo.getInstallerPackageNameSync();\n    } else {\n      installerPackageName = 'unknown';\n    }\n  }\n\n  return installerPackageName;\n}\nlet appName;\nexport function getApplicationName() {\n  if (!appName) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      appName = RNDeviceInfo.appName;\n    } else {\n      appName = 'unknown';\n    }\n  }\n\n  return appName;\n}\nlet buildNumber;\nexport function getBuildNumber() {\n  if (!buildNumber) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      buildNumber = RNDeviceInfo.buildNumber;\n    } else {\n      buildNumber = 'unknown';\n    }\n  }\n\n  return buildNumber;\n}\nlet version;\nexport function getVersion() {\n  if (!version) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      version = RNDeviceInfo.appVersion;\n    } else {\n      version = 'unknown';\n    }\n  }\n\n  return version;\n}\nexport function getReadableVersion() {\n  return getVersion() + '.' + getBuildNumber();\n}\nlet deviceName;\nexport async function getDeviceName() {\n  if (!deviceName) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      deviceName = await RNDeviceInfo.getDeviceName();\n    } else {\n      deviceName = 'unknown';\n    }\n  }\n\n  return deviceName;\n}\nexport function getDeviceNameSync() {\n  if (!deviceName) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      deviceName = RNDeviceInfo.getDeviceNameSync();\n    } else {\n      deviceName = 'unknown';\n    }\n  }\n\n  return deviceName;\n}\nexport async function getUsedMemory() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getUsedMemory();\n  }\n\n  return -1;\n}\nexport function getUsedMemorySync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getUsedMemorySync();\n  }\n\n  return -1;\n}\nlet userAgent;\nexport async function getUserAgent() {\n  if (!userAgent) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n      userAgent = await RNDeviceInfo.getUserAgent();\n    } else {\n      userAgent = 'unknown';\n    }\n  }\n\n  return userAgent;\n}\nexport function getUserAgentSync() {\n  if (!userAgent) {\n    // getUserAgentSync is not available on iOS since it rely on an completion operation\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      userAgent = RNDeviceInfo.getUserAgentSync();\n    } else {\n      userAgent = 'unknown';\n    }\n  }\n\n  return userAgent;\n}\nexport async function getFontScale() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getFontScale();\n  }\n\n  return -1;\n}\nexport function getFontScaleSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getFontScaleSync();\n  }\n\n  return -1;\n}\nlet bootloader;\nexport async function getBootloader() {\n  if (!bootloader) {\n    if (Platform.OS === 'android') {\n      bootloader = await RNDeviceInfo.getBootloader();\n    } else {\n      bootloader = 'unknown';\n    }\n  }\n\n  return bootloader;\n}\nexport function getBootloaderSync() {\n  if (!bootloader) {\n    if (Platform.OS === 'android') {\n      bootloader = RNDeviceInfo.getBootloaderSync();\n    } else {\n      bootloader = 'unknown';\n    }\n  }\n\n  return bootloader;\n}\nlet device;\nexport async function getDevice() {\n  if (!device) {\n    if (Platform.OS === 'android') {\n      device = await RNDeviceInfo.getDevice();\n    } else {\n      device = 'unknown';\n    }\n  }\n\n  return device;\n}\nexport function getDeviceSync() {\n  if (!device) {\n    if (Platform.OS === 'android') {\n      device = RNDeviceInfo.getDeviceSync();\n    } else {\n      device = 'unknown';\n    }\n  }\n\n  return device;\n}\nlet display;\nexport async function getDisplay() {\n  if (!display) {\n    if (Platform.OS === 'android') {\n      display = await RNDeviceInfo.getDisplay();\n    } else {\n      display = 'unknown';\n    }\n  }\n\n  return display;\n}\nexport function getDisplaySync() {\n  if (!display) {\n    if (Platform.OS === 'android') {\n      display = RNDeviceInfo.getDisplaySync();\n    } else {\n      display = 'unknown';\n    }\n  }\n\n  return display;\n}\nlet fingerprint;\nexport async function getFingerprint() {\n  if (!fingerprint) {\n    if (Platform.OS === 'android') {\n      fingerprint = await RNDeviceInfo.getFingerprint();\n    } else {\n      fingerprint = 'unknown';\n    }\n  }\n\n  return fingerprint;\n}\nexport function getFingerprintSync() {\n  if (!fingerprint) {\n    if (Platform.OS === 'android') {\n      fingerprint = RNDeviceInfo.getFingerprintSync();\n    } else {\n      fingerprint = 'unknown';\n    }\n  }\n\n  return fingerprint;\n}\nlet hardware;\nexport async function getHardware() {\n  if (!hardware) {\n    if (Platform.OS === 'android') {\n      hardware = await RNDeviceInfo.getHardware();\n    } else {\n      hardware = 'unknown';\n    }\n  }\n\n  return hardware;\n}\nexport function getHardwareSync() {\n  if (!hardware) {\n    if (Platform.OS === 'android') {\n      hardware = RNDeviceInfo.getHardwareSync();\n    } else {\n      hardware = 'unknown';\n    }\n  }\n\n  return hardware;\n}\nlet host;\nexport async function getHost() {\n  if (!host) {\n    if (Platform.OS === 'android') {\n      host = await RNDeviceInfo.getHost();\n    } else {\n      host = 'unknown';\n    }\n  }\n\n  return host;\n}\nexport function getHostSync() {\n  if (!host) {\n    if (Platform.OS === 'android') {\n      host = RNDeviceInfo.getHostSync();\n    } else {\n      host = 'unknown';\n    }\n  }\n\n  return host;\n}\nlet product;\nexport async function getProduct() {\n  if (!product) {\n    if (Platform.OS === 'android') {\n      product = await RNDeviceInfo.getProduct();\n    } else {\n      product = 'unknown';\n    }\n  }\n\n  return product;\n}\nexport function getProductSync() {\n  if (!product) {\n    if (Platform.OS === 'android') {\n      product = RNDeviceInfo.getProductSync();\n    } else {\n      product = 'unknown';\n    }\n  }\n\n  return product;\n}\nlet tags;\nexport async function getTags() {\n  if (!tags) {\n    if (Platform.OS === 'android') {\n      tags = await RNDeviceInfo.getTags();\n    } else {\n      tags = 'unknown';\n    }\n  }\n\n  return tags;\n}\nexport function getTagsSync() {\n  if (!tags) {\n    if (Platform.OS === 'android') {\n      tags = RNDeviceInfo.getTagsSync();\n    } else {\n      tags = 'unknown';\n    }\n  }\n\n  return tags;\n}\nlet type;\nexport async function getType() {\n  if (!type) {\n    if (Platform.OS === 'android') {\n      type = await RNDeviceInfo.getType();\n    } else {\n      type = 'unknown';\n    }\n  }\n\n  return type;\n}\nexport function getTypeSync() {\n  if (!type) {\n    if (Platform.OS === 'android') {\n      type = RNDeviceInfo.getTypeSync();\n    } else {\n      type = 'unknown';\n    }\n  }\n\n  return type;\n}\nlet baseOs;\nexport async function getBaseOs() {\n  if (!baseOs) {\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      baseOs = await RNDeviceInfo.getBaseOs();\n    } else {\n      baseOs = 'unknown';\n    }\n  }\n\n  return baseOs;\n}\nexport function getBaseOsSync() {\n  if (!baseOs) {\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      baseOs = RNDeviceInfo.getBaseOsSync();\n    } else {\n      baseOs = 'unknown';\n    }\n  }\n\n  return baseOs;\n}\nlet previewSdkInt;\nexport async function getPreviewSdkInt() {\n  if (!previewSdkInt) {\n    if (Platform.OS === 'android') {\n      previewSdkInt = await RNDeviceInfo.getPreviewSdkInt();\n    } else {\n      previewSdkInt = -1;\n    }\n  }\n\n  return previewSdkInt;\n}\nexport function getPreviewSdkIntSync() {\n  if (!previewSdkInt) {\n    if (Platform.OS === 'android') {\n      previewSdkInt = RNDeviceInfo.getPreviewSdkIntSync();\n    } else {\n      previewSdkInt = -1;\n    }\n  }\n\n  return previewSdkInt;\n}\nlet securityPatch;\nexport async function getSecurityPatch() {\n  if (!securityPatch) {\n    if (Platform.OS === 'android') {\n      securityPatch = await RNDeviceInfo.getSecurityPatch();\n    } else {\n      securityPatch = 'unknown';\n    }\n  }\n\n  return securityPatch;\n}\nexport function getSecurityPatchSync() {\n  if (!securityPatch) {\n    if (Platform.OS === 'android') {\n      securityPatch = RNDeviceInfo.getSecurityPatchSync();\n    } else {\n      securityPatch = 'unknown';\n    }\n  }\n\n  return securityPatch;\n}\nlet codeName;\nexport async function getCodename() {\n  if (!codeName) {\n    if (Platform.OS === 'android') {\n      codeName = await RNDeviceInfo.getCodename();\n    } else {\n      codeName = 'unknown';\n    }\n  }\n\n  return codeName;\n}\nexport function getCodenameSync() {\n  if (!codeName) {\n    if (Platform.OS === 'android') {\n      codeName = RNDeviceInfo.getCodenameSync();\n    } else {\n      codeName = 'unknown';\n    }\n  }\n\n  return codeName;\n}\nlet incremental;\nexport async function getIncremental() {\n  if (!incremental) {\n    if (Platform.OS === 'android') {\n      incremental = await RNDeviceInfo.getIncremental();\n    } else {\n      incremental = 'unknown';\n    }\n  }\n\n  return incremental;\n}\nexport function getIncrementalSync() {\n  if (!incremental) {\n    if (Platform.OS === 'android') {\n      incremental = RNDeviceInfo.getIncrementalSync();\n    } else {\n      incremental = 'unknown';\n    }\n  }\n\n  return incremental;\n}\nlet emulator;\nexport async function isEmulator() {\n  if (emulator === undefined) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      emulator = await RNDeviceInfo.isEmulator();\n    } else {\n      emulator = false;\n    }\n  }\n\n  return emulator;\n}\nexport function isEmulatorSync() {\n  if (emulator === undefined) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      emulator = RNDeviceInfo.isEmulatorSync();\n    } else {\n      emulator = false;\n    }\n  }\n\n  return emulator;\n}\nlet tablet;\nexport function isTablet() {\n  if (tablet === undefined) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      tablet = RNDeviceInfo.isTablet;\n    } else {\n      tablet = false;\n    }\n  }\n\n  return tablet;\n}\nexport async function isPinOrFingerprintSet() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n    return RNDeviceInfo.isPinOrFingerprintSet();\n  }\n\n  return false;\n}\nexport function isPinOrFingerprintSetSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n    return RNDeviceInfo.isPinOrFingerprintSetSync();\n  }\n\n  return false;\n}\nlet notch;\nexport function hasNotch() {\n  if (notch === undefined) {\n    let _brand = getBrand();\n\n    let _model = getModel();\n\n    notch = devicesWithNotch.findIndex(item => item.brand.toLowerCase() === _brand.toLowerCase() && item.model.toLowerCase() === _model.toLowerCase()) !== -1;\n  }\n\n  return notch;\n}\nlet firstInstallTime;\nexport async function getFirstInstallTime() {\n  if (!firstInstallTime) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows') {\n      firstInstallTime = await RNDeviceInfo.getFirstInstallTime();\n    } else {\n      firstInstallTime = -1;\n    }\n  }\n\n  return firstInstallTime;\n}\nexport function getFirstInstallTimeSync() {\n  if (!firstInstallTime) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows') {\n      firstInstallTime = RNDeviceInfo.getFirstInstallTimeSync();\n    } else {\n      firstInstallTime = -1;\n    }\n  }\n\n  return firstInstallTime;\n}\nlet installReferrer;\nexport async function getInstallReferrer() {\n  if (!installReferrer) {\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      installReferrer = await RNDeviceInfo.getInstallReferrer();\n    } else {\n      installReferrer = 'unknown';\n    }\n  }\n\n  return installReferrer;\n}\nexport function getInstallReferrerSync() {\n  if (!installReferrer) {\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      installReferrer = RNDeviceInfo.getInstallReferrerSync();\n    } else {\n      installReferrer = 'unknown';\n    }\n  }\n\n  return installReferrer;\n}\nlet lastUpdateTime;\nexport async function getLastUpdateTime() {\n  if (!lastUpdateTime) {\n    if (Platform.OS === 'android') {\n      lastUpdateTime = await RNDeviceInfo.getLastUpdateTime();\n    } else {\n      lastUpdateTime = -1;\n    }\n  }\n\n  return lastUpdateTime;\n}\nexport function getLastUpdateTimeSync() {\n  if (!lastUpdateTime) {\n    if (Platform.OS === 'android') {\n      lastUpdateTime = RNDeviceInfo.getLastUpdateTimeSync();\n    } else {\n      lastUpdateTime = -1;\n    }\n  }\n\n  return lastUpdateTime;\n}\nexport async function getPhoneNumber() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getPhoneNumber();\n  }\n\n  return 'unknown';\n}\nexport function getPhoneNumberSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getPhoneNumberSync();\n  }\n\n  return 'unknown';\n}\nexport async function getCarrier() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getCarrier();\n  }\n\n  return 'unknown';\n}\nexport function getCarrierSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getCarrierSync();\n  }\n\n  return 'unknown';\n}\nlet totalMemory;\nexport async function getTotalMemory() {\n  if (!totalMemory) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n      totalMemory = await RNDeviceInfo.getTotalMemory();\n    } else {\n      totalMemory = -1;\n    }\n  }\n\n  return totalMemory;\n}\nexport function getTotalMemorySync() {\n  if (!totalMemory) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n      totalMemory = RNDeviceInfo.getTotalMemorySync();\n    } else {\n      totalMemory = -1;\n    }\n  }\n\n  return totalMemory;\n}\nlet maxMemory;\nexport async function getMaxMemory() {\n  if (!maxMemory) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows' || Platform.OS === 'web') {\n      maxMemory = await RNDeviceInfo.getMaxMemory();\n    } else {\n      maxMemory = -1;\n    }\n  }\n\n  return maxMemory;\n}\nexport function getMaxMemorySync() {\n  if (!maxMemory) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows' || Platform.OS === 'web') {\n      maxMemory = RNDeviceInfo.getMaxMemorySync();\n    } else {\n      maxMemory = -1;\n    }\n  }\n\n  return maxMemory;\n}\nexport async function getTotalDiskCapacity() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getTotalDiskCapacity();\n  }\n\n  return -1;\n}\nexport function getTotalDiskCapacitySync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getTotalDiskCapacitySync();\n  }\n\n  return -1;\n}\nexport async function getFreeDiskStorage() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getFreeDiskStorage();\n  }\n\n  return -1;\n}\nexport function getFreeDiskStorageSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getFreeDiskStorageSync();\n  }\n\n  return -1;\n}\nexport async function getBatteryLevel() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return RNDeviceInfo.getBatteryLevel();\n  }\n\n  return -1;\n}\nexport function getBatteryLevelSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return RNDeviceInfo.getBatteryLevelSync();\n  }\n\n  return -1;\n}\nexport async function getPowerState() {\n  if (Platform.OS === 'ios' || Platform.OS === 'android' || Platform.OS === 'web') {\n    return RNDeviceInfo.getPowerState();\n  }\n\n  return {};\n}\nexport function getPowerStateSync() {\n  if (Platform.OS === 'ios' || Platform.OS === 'android' || Platform.OS === 'web') {\n    return RNDeviceInfo.getPowerStateSync();\n  }\n\n  return {};\n}\nexport async function isBatteryCharging() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.isBatteryCharging();\n  }\n\n  return false;\n}\nexport function isBatteryChargingSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.isBatteryChargingSync();\n  }\n\n  return false;\n}\nexport async function isLandscape() {\n  return Promise.resolve(isLandscapeSync());\n}\nexport function isLandscapeSync() {\n  const {\n    height,\n    width\n  } = Dimensions.get('window');\n  return width >= height;\n}\nexport async function isAirplaneMode() {\n  if (Platform.OS === 'android' || Platform.OS === 'web') {\n    return RNDeviceInfo.isAirplaneMode();\n  }\n\n  return Promise.resolve(false);\n}\nexport function isAirplaneModeSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'web') {\n    return RNDeviceInfo.isAirplaneModeSync();\n  }\n\n  return false;\n}\nlet deviceType;\nexport function getDeviceType() {\n  if (!deviceType) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      deviceType = RNDeviceInfo.deviceType;\n    } else {\n      deviceType = 'unknown';\n    }\n  }\n\n  return deviceType;\n}\nexport function getDeviceTypeSync() {\n  if (!deviceType) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      deviceType = RNDeviceInfo.deviceType;\n    } else {\n      deviceType = 'unknown';\n    }\n  }\n\n  return deviceType;\n}\n\nlet _supportedAbis;\n\nexport async function supportedAbis() {\n  if (!_supportedAbis) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      _supportedAbis = await RNDeviceInfo.getSupportedAbis();\n    } else {\n      _supportedAbis = [];\n    }\n  }\n\n  return _supportedAbis;\n}\nexport function supportedAbisSync() {\n  if (!_supportedAbis) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      _supportedAbis = RNDeviceInfo.getSupportedAbisSync();\n    } else {\n      _supportedAbis = [];\n    }\n  }\n\n  return _supportedAbis;\n}\n\nlet _supported32BitAbis;\n\nexport async function supported32BitAbis() {\n  if (!_supported32BitAbis) {\n    if (Platform.OS === 'android') {\n      _supported32BitAbis = await RNDeviceInfo.getSupported32BitAbis();\n    } else {\n      _supported32BitAbis = [];\n    }\n  }\n\n  return _supported32BitAbis;\n}\nexport function supported32BitAbisSync() {\n  if (!_supported32BitAbis) {\n    if (Platform.OS === 'android') {\n      _supported32BitAbis = RNDeviceInfo.getSupported32BitAbisSync();\n    } else {\n      _supported32BitAbis = [];\n    }\n  }\n\n  return _supported32BitAbis;\n}\n\nlet _supported64BitAbis;\n\nexport async function supported64BitAbis() {\n  if (!_supported64BitAbis) {\n    if (Platform.OS === 'android') {\n      _supported64BitAbis = await RNDeviceInfo.getSupported64BitAbis();\n    } else {\n      _supported64BitAbis = [];\n    }\n  }\n\n  return _supported64BitAbis;\n}\nexport function supported64BitAbisSync() {\n  if (!_supported64BitAbis) {\n    if (Platform.OS === 'android') {\n      _supported64BitAbis = RNDeviceInfo.getSupported64BitAbisSync();\n    } else {\n      _supported64BitAbis = [];\n    }\n  }\n\n  return _supported64BitAbis;\n}\nexport async function hasSystemFeature(feature) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeature(feature);\n  }\n\n  return false;\n}\nexport function hasSystemFeatureSync(feature) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeatureSync(feature);\n  }\n\n  return false;\n}\nexport async function getSystemAvailableFeatures() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getSystemAvailableFeatures();\n  }\n\n  return [];\n}\nexport function getSystemAvailableFeaturesSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getSystemAvailableFeaturesSync();\n  }\n\n  return [];\n}\nexport async function isLocationEnabled() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.isLocationEnabled();\n  }\n\n  return false;\n}\nexport function isLocationEnabledSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.isLocationEnabledSync();\n  }\n\n  return false;\n}\nexport async function isHeadphonesConnected() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.isHeadphonesConnected();\n  }\n\n  return false;\n}\nexport function isHeadphonesConnectedSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.isHeadphonesConnectedSync();\n  }\n\n  return false;\n}\nexport async function getAvailableLocationProviders() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getAvailableLocationProviders();\n  }\n\n  return {};\n}\nexport function getAvailableLocationProvidersSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getAvailableLocationProvidersSync();\n  }\n\n  return {};\n}\nexport async function getDeviceToken() {\n  if (Platform.OS === 'ios') {\n    return RNDeviceInfo.getDeviceToken();\n  }\n\n  return 'unknown';\n}\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useBatteryLevel() {\n  const [batteryLevel, setBatteryLevel] = useState(null);\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue = await getBatteryLevel();\n      setBatteryLevel(initialValue);\n    };\n\n    const onChange = level => {\n      setBatteryLevel(level);\n    };\n\n    setInitialValue();\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelDidChange', onChange);\n    return () => subscription.remove();\n  }, []);\n  return batteryLevel;\n}\nexport function useBatteryLevelIsLow() {\n  const [batteryLevelIsLow, setBatteryLevelIsLow] = useState(null);\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue = await getBatteryLevel();\n      setBatteryLevelIsLow(initialValue);\n    };\n\n    const onChange = level => {\n      setBatteryLevelIsLow(level);\n    };\n\n    setInitialValue();\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelIsLow', onChange);\n    return () => subscription.remove();\n  }, []);\n  return batteryLevelIsLow;\n}\nexport function usePowerState() {\n  const [powerState, setPowerState] = useState({});\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue = await getPowerState();\n      setPowerState(initialValue);\n    };\n\n    const onChange = state => {\n      setPowerState(state);\n    };\n\n    setInitialValue();\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_powerStateDidChange', onChange);\n    return () => subscription.remove();\n  }, []);\n  return powerState;\n}\nexport function useFirstInstallTime() {\n  return useOnMount(getFirstInstallTime, -1);\n}\nexport function useDeviceName() {\n  return useOnMount(getDeviceName, 'unknown');\n}\nexport function useHasSystemFeature(feature) {\n  const asyncGetter = useCallback(() => hasSystemFeature(feature), [feature]);\n  return useOnMount(asyncGetter, false);\n}\nexport function useIsEmulator() {\n  return useOnMount(isEmulator, false);\n}\nexport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState };\nconst deviceInfoModule = {\n  getAndroidId,\n  getAndroidIdSync,\n  getApiLevel,\n  getApiLevelSync,\n  getApplicationName,\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n  getBaseOs,\n  getBaseOsSync,\n  getBatteryLevel,\n  getBatteryLevelSync,\n  getBootloader,\n  getBootloaderSync,\n  getBrand,\n  getBuildId,\n  getBuildIdSync,\n  getBuildNumber,\n  getBundleId,\n  getCarrier,\n  getCarrierSync,\n  getCodename,\n  getCodenameSync,\n  getDevice,\n  getDeviceId,\n  getDeviceName,\n  getDeviceNameSync,\n  getDeviceSync,\n  getDeviceToken,\n  getDeviceType,\n  getDisplay,\n  getDisplaySync,\n  getFingerprint,\n  getFingerprintSync,\n  getFirstInstallTime,\n  getFirstInstallTimeSync,\n  getFontScale,\n  getFontScaleSync,\n  getFreeDiskStorage,\n  getFreeDiskStorageSync,\n  getHardware,\n  getHardwareSync,\n  getHost,\n  getHostSync,\n  getIncremental,\n  getIncrementalSync,\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n  getInstallReferrer,\n  getInstallReferrerSync,\n  getInstanceId,\n  getInstanceIdSync,\n  getIpAddress,\n  getIpAddressSync,\n  getLastUpdateTime,\n  getLastUpdateTimeSync,\n  getMacAddress,\n  getMacAddressSync,\n  getManufacturer,\n  getManufacturerSync,\n  getMaxMemory,\n  getMaxMemorySync,\n  getModel,\n  getPhoneNumber,\n  getPhoneNumberSync,\n  getPowerState,\n  getPowerStateSync,\n  getPreviewSdkInt,\n  getPreviewSdkIntSync,\n  getProduct,\n  getProductSync,\n  getReadableVersion,\n  getSecurityPatch,\n  getSecurityPatchSync,\n  getSerialNumber,\n  getSerialNumberSync,\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n  getSystemName,\n  getSystemVersion,\n  getTags,\n  getTagsSync,\n  getTotalDiskCapacity,\n  getTotalDiskCapacitySync,\n  getTotalMemory,\n  getTotalMemorySync,\n  getType,\n  getTypeSync,\n  getUniqueId,\n  getUsedMemory,\n  getUsedMemorySync,\n  getUserAgent,\n  getUserAgentSync,\n  getVersion,\n  hasNotch,\n  hasSystemFeature,\n  hasSystemFeatureSync,\n  isAirplaneMode,\n  isAirplaneModeSync,\n  isBatteryCharging,\n  isBatteryChargingSync,\n  isCameraPresent,\n  isCameraPresentSync,\n  isEmulator,\n  isEmulatorSync,\n  isHeadphonesConnected,\n  isHeadphonesConnectedSync,\n  isLandscape,\n  isLandscapeSync,\n  isLocationEnabled,\n  isLocationEnabledSync,\n  isPinOrFingerprintSet,\n  isPinOrFingerprintSetSync,\n  isTablet,\n  supported32BitAbis,\n  supported32BitAbisSync,\n  supported64BitAbis,\n  supported64BitAbisSync,\n  supportedAbis,\n  supportedAbisSync,\n  syncUniqueId,\n  useBatteryLevel,\n  useBatteryLevelIsLow,\n  useDeviceName,\n  useFirstInstallTime,\n  useHasSystemFeature,\n  useIsEmulator,\n  usePowerState\n};\nexport default deviceInfoModule;","map":{"version":3,"sources":["index.ts"],"names":["Platform","uniqueId","RNDeviceInfo","getUniqueId","instanceId","serialNumber","androidId","deviceId","manufacturer","model","brand","systemName","systemVersion","buildId","apiLevel","bundleId","installerPackageName","appName","buildNumber","version","getVersion","getBuildNumber","deviceName","userAgent","bootloader","device","display","fingerprint","hardware","host","product","tags","type","baseOs","previewSdkInt","securityPatch","codeName","incremental","emulator","tablet","notch","_brand","getBrand","_model","getModel","devicesWithNotch","item","firstInstallTime","installReferrer","lastUpdateTime","totalMemory","maxMemory","Promise","isLandscapeSync","width","Dimensions","deviceType","_supportedAbis","_supported32BitAbis","_supported64BitAbis","deviceInfoEmitter","NativeModules","useState","useEffect","setInitialValue","initialValue","getBatteryLevel","setBatteryLevel","onChange","level","subscription","setBatteryLevelIsLow","getPowerState","setPowerState","state","useOnMount","asyncGetter","useCallback","hasSystemFeature","deviceInfoModule","usePowerState"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { Dimensions, NativeEventEmitter, NativeModules, Platform } from 'react-native';\nimport { useOnMount } from './internal/asyncHookWrappers';\nimport devicesWithNotch from './internal/devicesWithNotch';\nimport RNDeviceInfo from './internal/nativeInterface';\nimport { DeviceInfoModule } from './internal/privateTypes';\nimport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState } from './internal/types';\n\nlet uniqueId: string;\nexport function getUniqueId() {\n  if (!uniqueId) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      uniqueId = RNDeviceInfo.uniqueId;\n    } else {\n      uniqueId = 'unknown';\n    }\n  }\n  return uniqueId;\n}\n\nexport async function syncUniqueId() {\n  if (Platform.OS === 'ios') {\n    uniqueId = await RNDeviceInfo.syncUniqueId();\n  } else {\n    uniqueId = getUniqueId();\n  }\n  return uniqueId;\n}\n\nlet instanceId: string;\nexport async function getInstanceId() {\n  if (!instanceId) {\n    if (Platform.OS === 'android') {\n      instanceId = await RNDeviceInfo.getInstanceId();\n    } else {\n      instanceId = 'unknown';\n    }\n  }\n  return instanceId;\n}\n\nexport function getInstanceIdSync() {\n  if (!instanceId) {\n    if (Platform.OS === 'android') {\n      instanceId = RNDeviceInfo.getInstanceIdSync();\n    } else {\n      instanceId = 'unknown';\n    }\n  }\n  return instanceId;\n}\n\nlet serialNumber: string;\nexport async function getSerialNumber() {\n  if (!serialNumber) {\n    if (Platform.OS === 'android') {\n      serialNumber = await RNDeviceInfo.getSerialNumber();\n    } else {\n      serialNumber = 'unknown';\n    }\n  }\n  return serialNumber;\n}\n\nexport function getSerialNumberSync() {\n  if (!serialNumber) {\n    if (Platform.OS === 'android') {\n      serialNumber = RNDeviceInfo.getSerialNumberSync();\n    } else {\n      serialNumber = 'unknown';\n    }\n  }\n  return serialNumber;\n}\n\nlet androidId: string;\nexport async function getAndroidId() {\n  if (!androidId) {\n    if (Platform.OS === 'android') {\n      androidId = await RNDeviceInfo.getAndroidId();\n    } else {\n      androidId = 'unknown';\n    }\n  }\n  return androidId;\n}\n\nexport function getAndroidIdSync() {\n  if (!androidId) {\n    if (Platform.OS === 'android') {\n      androidId = RNDeviceInfo.getAndroidIdSync();\n    } else {\n      androidId = 'unknown';\n    }\n  }\n  return androidId;\n}\n\nexport async function getIpAddress() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n    return RNDeviceInfo.getIpAddress();\n  }\n  return 'unknown';\n}\n\nexport function getIpAddressSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n    return RNDeviceInfo.getIpAddressSync();\n  }\n  return 'unknown';\n}\n\nexport async function isCameraPresent() {\n  if (Platform.OS === 'android' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return RNDeviceInfo.isCameraPresent();\n  }\n  return false;\n}\n\nexport function isCameraPresentSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'windows' || Platform.OS === 'web') {\n    return RNDeviceInfo.isCameraPresentSync();\n  }\n  return false;\n}\n\nexport async function getMacAddress() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddress();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n  return 'unknown';\n}\n\nexport function getMacAddressSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getMacAddressSync();\n  } else if (Platform.OS === 'ios') {\n    return '02:00:00:00:00:00';\n  }\n  return 'unknown';\n}\n\nlet deviceId: string;\nexport function getDeviceId() {\n  if (!deviceId) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      deviceId = RNDeviceInfo.deviceId;\n    } else {\n      deviceId = 'unknown';\n    }\n  }\n  return deviceId;\n}\n\nlet manufacturer: string;\nexport async function getManufacturer() {\n  if (!manufacturer) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows') {\n      manufacturer = await RNDeviceInfo.getSystemManufacturer();\n    } else if (Platform.OS === 'ios') {\n      manufacturer = 'Apple';\n    } else {\n      manufacturer = 'unknown';\n    }\n  }\n  return manufacturer;\n}\n\nexport function getManufacturerSync() {\n  if (!manufacturer) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows') {\n      manufacturer = RNDeviceInfo.getSystemManufacturerSync();\n    } else if (Platform.OS === 'ios') {\n      manufacturer = 'Apple';\n    } else {\n      manufacturer = 'unknown';\n    }\n  }\n  return manufacturer;\n}\n\nlet model: string;\nexport function getModel() {\n  if (!model) {\n    if (Platform.OS === 'ios' || Platform.OS === 'android' || Platform.OS === 'windows') {\n      model = RNDeviceInfo.model;\n    } else {\n      model = 'unknown';\n    }\n  }\n  return model;\n}\n\nlet brand: string;\nexport function getBrand() {\n  if (!brand) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      brand = RNDeviceInfo.brand;\n    } else {\n      brand = 'unknown';\n    }\n  }\n  return brand;\n}\n\nlet systemName: string;\nexport function getSystemName() {\n  if (!systemName) {\n    if (Platform.OS === 'ios') {\n      systemName = RNDeviceInfo.systemName;\n    } else if (Platform.OS === 'android') {\n      systemName = 'Android';\n    } else if (Platform.OS === 'windows') {\n      systemName = 'Windows';\n    } else {\n      systemName = 'unknown';\n    }\n  }\n  return systemName;\n}\n\nlet systemVersion: string;\nexport function getSystemVersion() {\n  if (!systemVersion) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      systemVersion = RNDeviceInfo.systemVersion;\n    } else {\n      systemVersion = 'unknown';\n    }\n  }\n  return systemVersion;\n}\n\nlet buildId: string;\nexport async function getBuildId() {\n  if (!buildId) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      buildId = await RNDeviceInfo.getBuildId();\n    } else {\n      buildId = 'unknown';\n    }\n  }\n  return buildId;\n}\n\nexport function getBuildIdSync() {\n  if (!buildId) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      buildId = RNDeviceInfo.getBuildIdSync();\n    } else {\n      buildId = 'unknown';\n    }\n  }\n  return buildId;\n}\n\nlet apiLevel: number;\nexport async function getApiLevel() {\n  if (!apiLevel) {\n    if (Platform.OS === 'android') {\n      apiLevel = await RNDeviceInfo.getApiLevel();\n    } else {\n      apiLevel = -1;\n    }\n  }\n  return apiLevel;\n}\n\nexport function getApiLevelSync() {\n  if (!apiLevel) {\n    if (Platform.OS === 'android') {\n      apiLevel = RNDeviceInfo.getApiLevelSync();\n    } else {\n      apiLevel = -1;\n    }\n  }\n  return apiLevel;\n}\n\nlet bundleId: string;\nexport function getBundleId() {\n  if (!bundleId) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      bundleId = RNDeviceInfo.bundleId;\n    } else {\n      bundleId = 'unknown';\n    }\n  }\n  return bundleId;\n}\n\nlet installerPackageName: string;\nexport async function getInstallerPackageName() {\n  if (!installerPackageName) {\n    if (Platform.OS === 'android') {\n      installerPackageName = await RNDeviceInfo.getInstallerPackageName();\n    } else {\n      installerPackageName = 'unknown';\n    }\n  }\n\n  return installerPackageName;\n}\n\nexport function getInstallerPackageNameSync() {\n  if (!installerPackageName) {\n    if (Platform.OS === 'android') {\n      installerPackageName = RNDeviceInfo.getInstallerPackageNameSync();\n    } else {\n      installerPackageName = 'unknown';\n    }\n  }\n\n  return installerPackageName;\n}\n\nlet appName: string;\nexport function getApplicationName() {\n  if (!appName) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      appName = RNDeviceInfo.appName;\n    } else {\n      appName = 'unknown';\n    }\n  }\n  return appName;\n}\n\nlet buildNumber: string;\nexport function getBuildNumber() {\n  if (!buildNumber) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      buildNumber = RNDeviceInfo.buildNumber;\n    } else {\n      buildNumber = 'unknown';\n    }\n  }\n  return buildNumber;\n}\n\nlet version: string;\nexport function getVersion() {\n  if (!version) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      version = RNDeviceInfo.appVersion;\n    } else {\n      version = 'unknown';\n    }\n  }\n  return version;\n}\n\nexport function getReadableVersion() {\n  return getVersion() + '.' + getBuildNumber();\n}\n\nlet deviceName: string;\nexport async function getDeviceName() {\n  if (!deviceName) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      deviceName = await RNDeviceInfo.getDeviceName();\n    } else {\n      deviceName = 'unknown';\n    }\n  }\n  return deviceName;\n}\n\nexport function getDeviceNameSync() {\n  if (!deviceName) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      deviceName = RNDeviceInfo.getDeviceNameSync();\n    } else {\n      deviceName = 'unknown';\n    }\n  }\n  return deviceName;\n}\n\nexport async function getUsedMemory() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getUsedMemory();\n  }\n  return -1;\n}\n\nexport function getUsedMemorySync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getUsedMemorySync();\n  }\n  return -1;\n}\n\nlet userAgent: string;\nexport async function getUserAgent() {\n  if (!userAgent) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n      userAgent = await RNDeviceInfo.getUserAgent();\n    } else {\n      userAgent = 'unknown';\n    }\n  }\n  return userAgent;\n}\n\nexport function getUserAgentSync() {\n  if (!userAgent) {\n    // getUserAgentSync is not available on iOS since it rely on an completion operation\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      userAgent = RNDeviceInfo.getUserAgentSync();\n    } else {\n      userAgent = 'unknown';\n    }\n  }\n  return userAgent;\n}\n\nexport async function getFontScale() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getFontScale();\n  }\n  return -1;\n}\n\nexport function getFontScaleSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getFontScaleSync();\n  }\n  return -1;\n}\n\nlet bootloader: string;\nexport async function getBootloader() {\n  if (!bootloader) {\n    if (Platform.OS === 'android') {\n      bootloader = await RNDeviceInfo.getBootloader();\n    } else {\n      bootloader = 'unknown';\n    }\n  }\n  return bootloader;\n}\n\nexport function getBootloaderSync() {\n  if (!bootloader) {\n    if (Platform.OS === 'android') {\n      bootloader = RNDeviceInfo.getBootloaderSync();\n    } else {\n      bootloader = 'unknown';\n    }\n  }\n  return bootloader;\n}\n\nlet device: string;\nexport async function getDevice() {\n  if (!device) {\n    if (Platform.OS === 'android') {\n      device = await RNDeviceInfo.getDevice();\n    } else {\n      device = 'unknown';\n    }\n  }\n  return device;\n}\n\nexport function getDeviceSync() {\n  if (!device) {\n    if (Platform.OS === 'android') {\n      device = RNDeviceInfo.getDeviceSync();\n    } else {\n      device = 'unknown';\n    }\n  }\n  return device;\n}\n\nlet display: string;\nexport async function getDisplay() {\n  if (!display) {\n    if (Platform.OS === 'android') {\n      display = await RNDeviceInfo.getDisplay();\n    } else {\n      display = 'unknown';\n    }\n  }\n  return display;\n}\n\nexport function getDisplaySync() {\n  if (!display) {\n    if (Platform.OS === 'android') {\n      display = RNDeviceInfo.getDisplaySync();\n    } else {\n      display = 'unknown';\n    }\n  }\n  return display;\n}\n\nlet fingerprint: string;\nexport async function getFingerprint() {\n  if (!fingerprint) {\n    if (Platform.OS === 'android') {\n      fingerprint = await RNDeviceInfo.getFingerprint();\n    } else {\n      fingerprint = 'unknown';\n    }\n  }\n  return fingerprint;\n}\n\nexport function getFingerprintSync() {\n  if (!fingerprint) {\n    if (Platform.OS === 'android') {\n      fingerprint = RNDeviceInfo.getFingerprintSync();\n    } else {\n      fingerprint = 'unknown';\n    }\n  }\n  return fingerprint;\n}\n\nlet hardware: string;\nexport async function getHardware() {\n  if (!hardware) {\n    if (Platform.OS === 'android') {\n      hardware = await RNDeviceInfo.getHardware();\n    } else {\n      hardware = 'unknown';\n    }\n  }\n  return hardware;\n}\n\nexport function getHardwareSync() {\n  if (!hardware) {\n    if (Platform.OS === 'android') {\n      hardware = RNDeviceInfo.getHardwareSync();\n    } else {\n      hardware = 'unknown';\n    }\n  }\n  return hardware;\n}\n\nlet host: string;\nexport async function getHost() {\n  if (!host) {\n    if (Platform.OS === 'android') {\n      host = await RNDeviceInfo.getHost();\n    } else {\n      host = 'unknown';\n    }\n  }\n  return host;\n}\n\nexport function getHostSync() {\n  if (!host) {\n    if (Platform.OS === 'android') {\n      host = RNDeviceInfo.getHostSync();\n    } else {\n      host = 'unknown';\n    }\n  }\n  return host;\n}\n\nlet product: string;\nexport async function getProduct() {\n  if (!product) {\n    if (Platform.OS === 'android') {\n      product = await RNDeviceInfo.getProduct();\n    } else {\n      product = 'unknown';\n    }\n  }\n  return product;\n}\n\nexport function getProductSync() {\n  if (!product) {\n    if (Platform.OS === 'android') {\n      product = RNDeviceInfo.getProductSync();\n    } else {\n      product = 'unknown';\n    }\n  }\n  return product;\n}\n\nlet tags: string;\nexport async function getTags() {\n  if (!tags) {\n    if (Platform.OS === 'android') {\n      tags = await RNDeviceInfo.getTags();\n    } else {\n      tags = 'unknown';\n    }\n  }\n  return tags;\n}\n\nexport function getTagsSync() {\n  if (!tags) {\n    if (Platform.OS === 'android') {\n      tags = RNDeviceInfo.getTagsSync();\n    } else {\n      tags = 'unknown';\n    }\n  }\n  return tags;\n}\n\nlet type: string;\nexport async function getType() {\n  if (!type) {\n    if (Platform.OS === 'android') {\n      type = await RNDeviceInfo.getType();\n    } else {\n      type = 'unknown';\n    }\n  }\n  return type;\n}\n\nexport function getTypeSync() {\n  if (!type) {\n    if (Platform.OS === 'android') {\n      type = RNDeviceInfo.getTypeSync();\n    } else {\n      type = 'unknown';\n    }\n  }\n  return type;\n}\n\nlet baseOs: string;\nexport async function getBaseOs() {\n  if (!baseOs) {\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      baseOs = await RNDeviceInfo.getBaseOs();\n    } else {\n      baseOs = 'unknown';\n    }\n  }\n  return baseOs;\n}\n\nexport function getBaseOsSync() {\n  if (!baseOs) {\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      baseOs = RNDeviceInfo.getBaseOsSync();\n    } else {\n      baseOs = 'unknown';\n    }\n  }\n  return baseOs;\n}\n\nlet previewSdkInt: number;\nexport async function getPreviewSdkInt() {\n  if (!previewSdkInt) {\n    if (Platform.OS === 'android') {\n      previewSdkInt = await RNDeviceInfo.getPreviewSdkInt();\n    } else {\n      previewSdkInt = -1;\n    }\n  }\n  return previewSdkInt;\n}\n\nexport function getPreviewSdkIntSync() {\n  if (!previewSdkInt) {\n    if (Platform.OS === 'android') {\n      previewSdkInt = RNDeviceInfo.getPreviewSdkIntSync();\n    } else {\n      previewSdkInt = -1;\n    }\n  }\n  return previewSdkInt;\n}\n\nlet securityPatch: string;\nexport async function getSecurityPatch() {\n  if (!securityPatch) {\n    if (Platform.OS === 'android') {\n      securityPatch = await RNDeviceInfo.getSecurityPatch();\n    } else {\n      securityPatch = 'unknown';\n    }\n  }\n  return securityPatch;\n}\n\nexport function getSecurityPatchSync() {\n  if (!securityPatch) {\n    if (Platform.OS === 'android') {\n      securityPatch = RNDeviceInfo.getSecurityPatchSync();\n    } else {\n      securityPatch = 'unknown';\n    }\n  }\n  return securityPatch;\n}\n\nlet codeName: string;\nexport async function getCodename() {\n  if (!codeName) {\n    if (Platform.OS === 'android') {\n      codeName = await RNDeviceInfo.getCodename();\n    } else {\n      codeName = 'unknown';\n    }\n  }\n  return codeName;\n}\n\nexport function getCodenameSync() {\n  if (!codeName) {\n    if (Platform.OS === 'android') {\n      codeName = RNDeviceInfo.getCodenameSync();\n    } else {\n      codeName = 'unknown';\n    }\n  }\n  return codeName;\n}\n\nlet incremental: string;\nexport async function getIncremental() {\n  if (!incremental) {\n    if (Platform.OS === 'android') {\n      incremental = await RNDeviceInfo.getIncremental();\n    } else {\n      incremental = 'unknown';\n    }\n  }\n  return incremental;\n}\n\nexport function getIncrementalSync() {\n  if (!incremental) {\n    if (Platform.OS === 'android') {\n      incremental = RNDeviceInfo.getIncrementalSync();\n    } else {\n      incremental = 'unknown';\n    }\n  }\n  return incremental;\n}\n\nlet emulator: boolean;\nexport async function isEmulator() {\n  if (emulator === undefined) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      emulator = await RNDeviceInfo.isEmulator();\n    } else {\n      emulator = false;\n    }\n  }\n  return emulator;\n}\n\nexport function isEmulatorSync() {\n  if (emulator === undefined) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      emulator = RNDeviceInfo.isEmulatorSync();\n    } else {\n      emulator = false;\n    }\n  }\n  return emulator;\n}\n\nlet tablet: boolean;\nexport function isTablet() {\n  if (tablet === undefined) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n      tablet = RNDeviceInfo.isTablet;\n    } else {\n      tablet = false;\n    }\n  }\n  return tablet;\n}\n\nexport async function isPinOrFingerprintSet() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n    return RNDeviceInfo.isPinOrFingerprintSet();\n  }\n  return false;\n}\n\nexport function isPinOrFingerprintSetSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'windows') {\n    return RNDeviceInfo.isPinOrFingerprintSetSync();\n  }\n  return false;\n}\n\nlet notch: boolean;\nexport function hasNotch() {\n  if (notch === undefined) {\n    let _brand = getBrand();\n    let _model = getModel();\n    notch =\n      devicesWithNotch.findIndex(\n        (item) =>\n          item.brand.toLowerCase() === _brand.toLowerCase() &&\n          item.model.toLowerCase() === _model.toLowerCase()\n      ) !== -1;\n  }\n  return notch;\n}\n\nlet firstInstallTime: number;\nexport async function getFirstInstallTime() {\n  if (!firstInstallTime) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows') {\n      firstInstallTime = await RNDeviceInfo.getFirstInstallTime();\n    } else {\n      firstInstallTime = -1;\n    }\n  }\n  return firstInstallTime;\n}\n\nexport function getFirstInstallTimeSync() {\n  if (!firstInstallTime) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows') {\n      firstInstallTime = RNDeviceInfo.getFirstInstallTimeSync();\n    } else {\n      firstInstallTime = -1;\n    }\n  }\n  return firstInstallTime;\n}\n\nlet installReferrer: string;\nexport async function getInstallReferrer() {\n  if (!installReferrer) {\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      installReferrer = await RNDeviceInfo.getInstallReferrer();\n    } else {\n      installReferrer = 'unknown';\n    }\n  }\n  return installReferrer;\n}\n\nexport function getInstallReferrerSync() {\n  if (!installReferrer) {\n    if (Platform.OS === 'android' || Platform.OS === 'web') {\n      installReferrer = RNDeviceInfo.getInstallReferrerSync();\n    } else {\n      installReferrer = 'unknown';\n    }\n  }\n  return installReferrer;\n}\n\nlet lastUpdateTime: number;\nexport async function getLastUpdateTime() {\n  if (!lastUpdateTime) {\n    if (Platform.OS === 'android') {\n      lastUpdateTime = await RNDeviceInfo.getLastUpdateTime();\n    } else {\n      lastUpdateTime = -1;\n    }\n  }\n  return lastUpdateTime;\n}\n\nexport function getLastUpdateTimeSync() {\n  if (!lastUpdateTime) {\n    if (Platform.OS === 'android') {\n      lastUpdateTime = RNDeviceInfo.getLastUpdateTimeSync();\n    } else {\n      lastUpdateTime = -1;\n    }\n  }\n  return lastUpdateTime;\n}\n\nexport async function getPhoneNumber() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getPhoneNumber();\n  }\n  return 'unknown';\n}\n\nexport function getPhoneNumberSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getPhoneNumberSync();\n  }\n  return 'unknown';\n}\n\nexport async function getCarrier() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getCarrier();\n  }\n  return 'unknown';\n}\n\nexport function getCarrierSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getCarrierSync();\n  }\n  return 'unknown';\n}\n\nlet totalMemory: number;\nexport async function getTotalMemory() {\n  if (!totalMemory) {\n    if (\n      Platform.OS === 'android' ||\n      Platform.OS === 'ios' ||\n      Platform.OS === 'windows' ||\n      Platform.OS === 'web'\n    ) {\n      totalMemory = await RNDeviceInfo.getTotalMemory();\n    } else {\n      totalMemory = -1;\n    }\n  }\n  return totalMemory;\n}\n\nexport function getTotalMemorySync() {\n  if (!totalMemory) {\n    if (\n      Platform.OS === 'android' ||\n      Platform.OS === 'ios' ||\n      Platform.OS === 'windows' ||\n      Platform.OS === 'web'\n    ) {\n      totalMemory = RNDeviceInfo.getTotalMemorySync();\n    } else {\n      totalMemory = -1;\n    }\n  }\n  return totalMemory;\n}\n\nlet maxMemory: number;\nexport async function getMaxMemory() {\n  if (!maxMemory) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows' || Platform.OS === 'web') {\n      maxMemory = await RNDeviceInfo.getMaxMemory();\n    } else {\n      maxMemory = -1;\n    }\n  }\n  return maxMemory;\n}\n\nexport function getMaxMemorySync() {\n  if (!maxMemory) {\n    if (Platform.OS === 'android' || Platform.OS === 'windows' || Platform.OS === 'web') {\n      maxMemory = RNDeviceInfo.getMaxMemorySync();\n    } else {\n      maxMemory = -1;\n    }\n  }\n  return maxMemory;\n}\n\nexport async function getTotalDiskCapacity() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getTotalDiskCapacity();\n  }\n  return -1;\n}\n\nexport function getTotalDiskCapacitySync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getTotalDiskCapacitySync();\n  }\n  return -1;\n}\n\nexport async function getFreeDiskStorage() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getFreeDiskStorage();\n  }\n  return -1;\n}\n\nexport function getFreeDiskStorageSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.getFreeDiskStorageSync();\n  }\n  return -1;\n}\n\nexport async function getBatteryLevel() {\n  if (\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios' ||\n    Platform.OS === 'windows' ||\n    Platform.OS === 'web'\n  ) {\n    return RNDeviceInfo.getBatteryLevel();\n  }\n  return -1;\n}\n\nexport function getBatteryLevelSync() {\n  if (\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios' ||\n    Platform.OS === 'windows' ||\n    Platform.OS === 'web'\n  ) {\n    return RNDeviceInfo.getBatteryLevelSync();\n  }\n  return -1;\n}\n\nexport async function getPowerState() {\n  if (Platform.OS === 'ios' || Platform.OS === 'android' || Platform.OS === 'web') {\n    return RNDeviceInfo.getPowerState();\n  }\n  return {};\n}\n\nexport function getPowerStateSync() {\n  if (Platform.OS === 'ios' || Platform.OS === 'android' || Platform.OS === 'web') {\n    return RNDeviceInfo.getPowerStateSync();\n  }\n  return {};\n}\n\nexport async function isBatteryCharging() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.isBatteryCharging();\n  }\n  return false;\n}\n\nexport function isBatteryChargingSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.isBatteryChargingSync();\n  }\n  return false;\n}\n\nexport async function isLandscape() {\n  return Promise.resolve(isLandscapeSync());\n}\n\nexport function isLandscapeSync() {\n  const { height, width } = Dimensions.get('window');\n  return width >= height;\n}\n\nexport async function isAirplaneMode() {\n  if (Platform.OS === 'android' || Platform.OS === 'web') {\n    return RNDeviceInfo.isAirplaneMode();\n  }\n  return Promise.resolve(false);\n}\n\nexport function isAirplaneModeSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'web') {\n    return RNDeviceInfo.isAirplaneModeSync();\n  }\n  return false;\n}\n\nlet deviceType: DeviceType;\nexport function getDeviceType() {\n  if (!deviceType) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      deviceType = RNDeviceInfo.deviceType;\n    } else {\n      deviceType = 'unknown';\n    }\n  }\n  return deviceType;\n}\n\nexport function getDeviceTypeSync() {\n  if (!deviceType) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      deviceType = RNDeviceInfo.deviceType;\n    } else {\n      deviceType = 'unknown';\n    }\n  }\n  return deviceType;\n}\n\nlet _supportedAbis: string[];\nexport async function supportedAbis() {\n  if (!_supportedAbis) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      _supportedAbis = await RNDeviceInfo.getSupportedAbis();\n    } else {\n      _supportedAbis = [];\n    }\n  }\n  return _supportedAbis;\n}\n\nexport function supportedAbisSync() {\n  if (!_supportedAbis) {\n    if (Platform.OS === 'android' || Platform.OS === 'ios') {\n      _supportedAbis = RNDeviceInfo.getSupportedAbisSync();\n    } else {\n      _supportedAbis = [];\n    }\n  }\n  return _supportedAbis;\n}\n\nlet _supported32BitAbis: string[];\nexport async function supported32BitAbis() {\n  if (!_supported32BitAbis) {\n    if (Platform.OS === 'android') {\n      _supported32BitAbis = await RNDeviceInfo.getSupported32BitAbis();\n    } else {\n      _supported32BitAbis = [];\n    }\n  }\n  return _supported32BitAbis;\n}\n\nexport function supported32BitAbisSync() {\n  if (!_supported32BitAbis) {\n    if (Platform.OS === 'android') {\n      _supported32BitAbis = RNDeviceInfo.getSupported32BitAbisSync();\n    } else {\n      _supported32BitAbis = [];\n    }\n  }\n  return _supported32BitAbis;\n}\n\nlet _supported64BitAbis: string[];\nexport async function supported64BitAbis() {\n  if (!_supported64BitAbis) {\n    if (Platform.OS === 'android') {\n      _supported64BitAbis = await RNDeviceInfo.getSupported64BitAbis();\n    } else {\n      _supported64BitAbis = [];\n    }\n  }\n  return _supported64BitAbis;\n}\n\nexport function supported64BitAbisSync() {\n  if (!_supported64BitAbis) {\n    if (Platform.OS === 'android') {\n      _supported64BitAbis = RNDeviceInfo.getSupported64BitAbisSync();\n    } else {\n      _supported64BitAbis = [];\n    }\n  }\n  return _supported64BitAbis;\n}\n\nexport async function hasSystemFeature(feature: string) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeature(feature);\n  }\n  return false;\n}\n\nexport function hasSystemFeatureSync(feature: string) {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.hasSystemFeatureSync(feature);\n  }\n  return false;\n}\n\nexport async function getSystemAvailableFeatures() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getSystemAvailableFeatures();\n  }\n  return [];\n}\n\nexport function getSystemAvailableFeaturesSync() {\n  if (Platform.OS === 'android') {\n    return RNDeviceInfo.getSystemAvailableFeaturesSync();\n  }\n  return [];\n}\n\nexport async function isLocationEnabled() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.isLocationEnabled();\n  }\n  return false;\n}\n\nexport function isLocationEnabledSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios' || Platform.OS === 'web') {\n    return RNDeviceInfo.isLocationEnabledSync();\n  }\n  return false;\n}\n\nexport async function isHeadphonesConnected() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.isHeadphonesConnected();\n  }\n  return false;\n}\n\nexport function isHeadphonesConnectedSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.isHeadphonesConnectedSync();\n  }\n  return false;\n}\n\nexport async function getAvailableLocationProviders() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getAvailableLocationProviders();\n  }\n  return {};\n}\n\nexport function getAvailableLocationProvidersSync() {\n  if (Platform.OS === 'android' || Platform.OS === 'ios') {\n    return RNDeviceInfo.getAvailableLocationProvidersSync();\n  }\n  return {};\n}\n\nexport async function getDeviceToken() {\n  if (Platform.OS === 'ios') {\n    return RNDeviceInfo.getDeviceToken();\n  }\n  return 'unknown';\n}\n\nconst deviceInfoEmitter = new NativeEventEmitter(NativeModules.RNDeviceInfo);\nexport function useBatteryLevel(): number | null {\n  const [batteryLevel, setBatteryLevel] = useState<number | null>(null);\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: number = await getBatteryLevel();\n      setBatteryLevel(initialValue);\n    };\n\n    const onChange = (level: number) => {\n      setBatteryLevel(level);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener(\n      'RNDeviceInfo_batteryLevelDidChange',\n      onChange\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  return batteryLevel;\n}\n\nexport function useBatteryLevelIsLow(): number | null {\n  const [batteryLevelIsLow, setBatteryLevelIsLow] = useState<number | null>(null);\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: number = await getBatteryLevel();\n      setBatteryLevelIsLow(initialValue);\n    };\n\n    const onChange = (level: number) => {\n      setBatteryLevelIsLow(level);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener('RNDeviceInfo_batteryLevelIsLow', onChange);\n\n    return () => subscription.remove();\n  }, []);\n\n  return batteryLevelIsLow;\n}\n\nexport function usePowerState(): PowerState | {} {\n  const [powerState, setPowerState] = useState<PowerState | {}>({});\n\n  useEffect(() => {\n    const setInitialValue = async () => {\n      const initialValue: PowerState | {} = await getPowerState();\n      setPowerState(initialValue);\n    };\n\n    const onChange = (state: PowerState) => {\n      setPowerState(state);\n    };\n\n    setInitialValue();\n\n    const subscription = deviceInfoEmitter.addListener(\n      'RNDeviceInfo_powerStateDidChange',\n      onChange\n    );\n\n    return () => subscription.remove();\n  }, []);\n\n  return powerState;\n}\n\nexport function useFirstInstallTime(): AsyncHookResult<number> {\n  return useOnMount(getFirstInstallTime, -1);\n}\n\nexport function useDeviceName(): AsyncHookResult<string> {\n  return useOnMount(getDeviceName, 'unknown');\n}\n\nexport function useHasSystemFeature(feature: string): AsyncHookResult<boolean> {\n  const asyncGetter = useCallback(() => hasSystemFeature(feature), [feature]);\n  return useOnMount(asyncGetter, false);\n}\n\nexport function useIsEmulator(): AsyncHookResult<boolean> {\n  return useOnMount(isEmulator, false);\n}\n\nexport { AsyncHookResult, DeviceType, LocationProviderInfo, PowerState };\n\nconst deviceInfoModule: DeviceInfoModule = {\n  getAndroidId,\n  getAndroidIdSync,\n  getApiLevel,\n  getApiLevelSync,\n  getApplicationName,\n  getAvailableLocationProviders,\n  getAvailableLocationProvidersSync,\n  getBaseOs,\n  getBaseOsSync,\n  getBatteryLevel,\n  getBatteryLevelSync,\n  getBootloader,\n  getBootloaderSync,\n  getBrand,\n  getBuildId,\n  getBuildIdSync,\n  getBuildNumber,\n  getBundleId,\n  getCarrier,\n  getCarrierSync,\n  getCodename,\n  getCodenameSync,\n  getDevice,\n  getDeviceId,\n  getDeviceName,\n  getDeviceNameSync,\n  getDeviceSync,\n  getDeviceToken,\n  getDeviceType,\n  getDisplay,\n  getDisplaySync,\n  getFingerprint,\n  getFingerprintSync,\n  getFirstInstallTime,\n  getFirstInstallTimeSync,\n  getFontScale,\n  getFontScaleSync,\n  getFreeDiskStorage,\n  getFreeDiskStorageSync,\n  getHardware,\n  getHardwareSync,\n  getHost,\n  getHostSync,\n  getIncremental,\n  getIncrementalSync,\n  getInstallerPackageName,\n  getInstallerPackageNameSync,\n  getInstallReferrer,\n  getInstallReferrerSync,\n  getInstanceId,\n  getInstanceIdSync,\n  getIpAddress,\n  getIpAddressSync,\n  getLastUpdateTime,\n  getLastUpdateTimeSync,\n  getMacAddress,\n  getMacAddressSync,\n  getManufacturer,\n  getManufacturerSync,\n  getMaxMemory,\n  getMaxMemorySync,\n  getModel,\n  getPhoneNumber,\n  getPhoneNumberSync,\n  getPowerState,\n  getPowerStateSync,\n  getPreviewSdkInt,\n  getPreviewSdkIntSync,\n  getProduct,\n  getProductSync,\n  getReadableVersion,\n  getSecurityPatch,\n  getSecurityPatchSync,\n  getSerialNumber,\n  getSerialNumberSync,\n  getSystemAvailableFeatures,\n  getSystemAvailableFeaturesSync,\n  getSystemName,\n  getSystemVersion,\n  getTags,\n  getTagsSync,\n  getTotalDiskCapacity,\n  getTotalDiskCapacitySync,\n  getTotalMemory,\n  getTotalMemorySync,\n  getType,\n  getTypeSync,\n  getUniqueId,\n  getUsedMemory,\n  getUsedMemorySync,\n  getUserAgent,\n  getUserAgentSync,\n  getVersion,\n  hasNotch,\n  hasSystemFeature,\n  hasSystemFeatureSync,\n  isAirplaneMode,\n  isAirplaneModeSync,\n  isBatteryCharging,\n  isBatteryChargingSync,\n  isCameraPresent,\n  isCameraPresentSync,\n  isEmulator,\n  isEmulatorSync,\n  isHeadphonesConnected,\n  isHeadphonesConnectedSync,\n  isLandscape,\n  isLandscapeSync,\n  isLocationEnabled,\n  isLocationEnabledSync,\n  isPinOrFingerprintSet,\n  isPinOrFingerprintSetSync,\n  isTablet,\n  supported32BitAbis,\n  supported32BitAbisSync,\n  supported64BitAbis,\n  supported64BitAbisSync,\n  supportedAbis,\n  supportedAbisSync,\n  syncUniqueId,\n  useBatteryLevel,\n  useBatteryLevelIsLow,\n  useDeviceName,\n  useFirstInstallTime,\n  useHasSystemFeature,\n  useIsEmulator,\n  usePowerState,\n};\n\nexport default deviceInfoModule;\n"]},"metadata":{},"sourceType":"module"}