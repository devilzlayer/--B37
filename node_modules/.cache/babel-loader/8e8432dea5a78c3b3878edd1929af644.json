{"ast":null,"code":"import { useState, useEffect } from 'react';\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\n\nexport function useOnMount(asyncGetter, initialResult) {\n  const [response, setResponse] = useState({\n    loading: true,\n    result: initialResult\n  });\n  useEffect(() => {\n    // async function cuz react complains if useEffect's effect param is an async function\n    const getAsync = async () => {\n      const result = await asyncGetter();\n      setResponse({\n        loading: false,\n        result\n      });\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n  return response;\n}","map":{"version":3,"sources":["asyncHookWrappers.ts"],"names":["useState","loading","result","initialResult","useEffect","getAsync","asyncGetter","setResponse"],"mappings":"AAAA,SAAA,QAAA,EAAA,SAAA,QAAA,OAAA;AAIA;;;;;;AAKA,OAAO,SAAA,UAAA,CAAA,WAAA,EAAA,aAAA,EAA4F;AACjG,QAAM,CAAA,QAAA,EAAA,WAAA,IAA0BA,QAAQ,CAAqB;AAC3DC,IAAAA,OAAO,EADoD,IAAA;AAE3DC,IAAAA,MAAM,EAAEC;AAFmD,GAArB,CAAxC;AAKAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMC,QAAQ,GAAG,YAAY;AAC3B,YAAMH,MAAM,GAAG,MAAMI,WAArB,EAAA;AACAC,MAAAA,WAAW,CAAC;AAAEN,QAAAA,OAAO,EAAT,KAAA;AAAkBC,QAAAA;AAAlB,OAAD,CAAXK;AAFF,KAAA;;AAKAF,IAAAA,QAAQ;AAPD,GAAA,EAQN,CARHD,WAQG,CARM,CAATA;AAUA,SAAA,QAAA;AACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { AsyncHookResult } from './types';\n\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\nexport function useOnMount<T>(asyncGetter: () => Promise<T>, initialResult: T): AsyncHookResult<T> {\n  const [response, setResponse] = useState<AsyncHookResult<T>>({\n    loading: true,\n    result: initialResult,\n  });\n\n  useEffect(() => {\n    // async function cuz react complains if useEffect's effect param is an async function\n    const getAsync = async () => {\n      const result = await asyncGetter();\n      setResponse({ loading: false, result });\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n\n  return response;\n}\n"]},"metadata":{},"sourceType":"module"}