{"ast":null,"code":"import _regeneratorRuntime from \"/Users/cramj/Documents/New PWA/GIT/node_modules/react-scripts/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/cramj/Documents/New PWA/GIT/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/cramj/Documents/New PWA/GIT/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\n\nexport function useOnMount(asyncGetter, initialResult) {\n  var _useState = useState({\n    loading: true,\n    result: initialResult\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      response = _useState2[0],\n      setResponse = _useState2[1];\n\n  useEffect(function () {\n    // async function cuz react complains if useEffect's effect param is an async function\n    var getAsync = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return asyncGetter();\n\n              case 2:\n                result = _context.sent;\n                setResponse({\n                  loading: false,\n                  result: result\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function getAsync() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    getAsync();\n  }, [asyncGetter]);\n  return response;\n}","map":{"version":3,"sources":["asyncHookWrappers.ts"],"names":["useState","loading","result","initialResult","useEffect","getAsync","asyncGetter","setResponse"],"mappings":";;;AAAA,SAAA,QAAA,EAAA,SAAA,QAAA,OAAA;AAIA;;;;;;AAKA,OAAO,SAAA,UAAA,CAAA,WAAA,EAAA,aAAA,EAA4F;AAAA,kBACjEA,QAAQ,CAAqB;AAC3DC,IAAAA,OAAO,EADoD,IAAA;AAE3DC,IAAAA,MAAM,EAAEC;AAFmD,GAArB,CADyD;AAAA;AAAA,MAC3F,QAD2F;AAAA,MAC3F,WAD2F;;AAMjGC,EAAAA,SAAS,CAAC,YAAM;AACd;AACA,QAAMC,QAAQ;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACMC,WAArB,EADe;;AAAA;AACTJ,gBAAAA,MADS;AAEfK,gBAAAA,WAAW,CAAC;AAAEN,kBAAAA,OAAO,EAAT,KAAA;AAAkBC,kBAAAA,MAAAA,EAAAA;AAAlB,iBAAD,CAAXK;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAARF,QAAQ;AAAA;AAAA;AAAA,OAAd;;AAKAA,IAAAA,QAAQ;AAPD,GAAA,EAQN,CARHD,WAQG,CARM,CAATA;AAUA,SAAA,QAAA;AACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { AsyncHookResult } from './types';\n\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\nexport function useOnMount<T>(asyncGetter: () => Promise<T>, initialResult: T): AsyncHookResult<T> {\n  const [response, setResponse] = useState<AsyncHookResult<T>>({\n    loading: true,\n    result: initialResult,\n  });\n\n  useEffect(() => {\n    // async function cuz react complains if useEffect's effect param is an async function\n    const getAsync = async () => {\n      const result = await asyncGetter();\n      setResponse({ loading: false, result });\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n\n  return response;\n}\n"]},"metadata":{},"sourceType":"module"}