{"ast":null,"code":"var _jsxFileName = \"/Users/cramj/Documents/New PWA/ubet-project (1)/src/component/Avatar/upload.js\";\nimport React from \"react\";\nimport ReactCrop from \"react-image-crop\";\n\nclass Upload extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onImageLoaded = async image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = async crop => {\n      const {\n        crop: {\n          x,\n          y\n        }\n      } = this.state;\n\n      if (this.imageRef && crop.width && crop.height) {\n        const croppedImageUrl = await this.onGetCropImg(this.imageRef, crop, \"newFile.jpeg\");\n        this.setState({\n          croppedImageUrl\n        });\n      }\n    };\n\n    this.onGetCropImg = (image, crop, fileName) => {\n      const canvas = document.createElement(\"canvas\");\n      const scaleX = image.naturalWidth / image.width;\n      const scaleY = image.naturalHeight / image.height;\n      canvas.width = 350;\n      canvas.height = 350;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, 350, 350);\n      return new Promise((resolve, reject) => {\n        canvas.toBlob(blob => {\n          if (!blob) {\n            // reject(new Error('Canvas is empty'));\n            console.error(\"Canvas is empty\");\n            return;\n          }\n\n          blob.name = fileName;\n          window.URL.revokeObjectURL(this.fileUrl);\n          this.fileUrl = window.URL.createObjectURL(blob); // console.warn(\"he\", blob.size);\n          // resolve(this.fileUrl);\n\n          resolve(blob); // resolve(canvas.toDataURL('image/jpeg'));\n        }, \"image/jpeg\");\n      });\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      this.setState({\n        crop\n      });\n    };\n\n    this.state = {\n      image: null,\n      crop: {\n        width: 90,\n        aspect: 1 / 1,\n        unit: \"%\",\n        x: 0,\n        y: 0\n      },\n      croppedImageUrl: null\n    };\n    this.inputFile = React.createRef();\n  }\n\n  render() {\n    const {\n      src,\n      onHide,\n      onSendBack\n    } = this.props;\n    const {\n      crop,\n      croppedImageUrl\n    } = this.state;\n\n    if (src) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-custom-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-custom-content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-custom-image\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(ReactCrop, {\n        src: src,\n        crop: crop,\n        onImageLoaded: this.onImageLoaded,\n        onComplete: this.onCropComplete,\n        onChange: this.onCropChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-custom-buttons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: onHide,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }\n      }, \"\\u53D6\\u6D88\"), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"active\",\n        onClick: () => onSendBack(croppedImageUrl),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }\n      }, \"\\u4FDD\\u5B58\"))));\n    }\n\n    return null;\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["/Users/cramj/Documents/New PWA/ubet-project (1)/src/component/Avatar/upload.js"],"names":["React","ReactCrop","Upload","Component","constructor","props","onImageLoaded","image","imageRef","onCropComplete","crop","x","y","state","width","height","croppedImageUrl","onGetCropImg","setState","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","Promise","resolve","reject","toBlob","blob","console","error","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","onCropChange","percentCrop","aspect","unit","inputFile","createRef","render","src","onHide","onSendBack"],"mappings":"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","sourcesContent":["import React   from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\n\r\n\r\nclass Upload extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          image: null,\r\n          crop: {\r\n            width: 90,\r\n            aspect: 1 / 1,\r\n            unit: \"%\",\r\n            x: 0,\r\n            y: 0,\r\n          },\r\n          croppedImageUrl: null,\r\n        };\r\n        this.inputFile = React.createRef();\r\n    }\r\n\r\n    onImageLoaded =  async (image) => {\r\n        this.imageRef = image;\r\n    };\r\n\r\n    onCropComplete = async (crop) => {\r\n        const { crop : { x , y} } = this.state\r\n\r\n        if (this.imageRef && crop.width && crop.height) {\r\n          const croppedImageUrl = await this.onGetCropImg(\r\n            this.imageRef,\r\n            crop, \"newFile.jpeg\"\r\n          );\r\n          this.setState({ croppedImageUrl });\r\n        }\r\n    };\r\n\r\n    onGetCropImg = (image, crop, fileName) => {\r\n        const canvas = document.createElement(\"canvas\");\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = 350;\r\n        canvas.height = 350;\r\n        const ctx = canvas.getContext(\"2d\");\r\n    \r\n        ctx.drawImage(\r\n          image,\r\n          crop.x * scaleX,\r\n          crop.y * scaleY,\r\n          crop.width * scaleX,\r\n          crop.height * scaleY,\r\n          0,\r\n          0,\r\n          350,\r\n          350\r\n        );\r\n        return new Promise((resolve, reject) => {\r\n          canvas.toBlob((blob) => {\r\n            if (!blob) {\r\n              // reject(new Error('Canvas is empty'));\r\n              console.error(\"Canvas is empty\");\r\n              return;\r\n            }\r\n            blob.name = fileName;\r\n            window.URL.revokeObjectURL(this.fileUrl);\r\n            this.fileUrl = window.URL.createObjectURL(blob);\r\n            // console.warn(\"he\", blob.size);\r\n            // resolve(this.fileUrl);\r\n            resolve(blob);\r\n            // resolve(canvas.toDataURL('image/jpeg'));\r\n          }, \"image/jpeg\");\r\n        });\r\n    };\r\n\r\n\r\n    onCropChange = (crop, percentCrop) => {\r\n        this.setState({ crop });\r\n    };\r\n\r\n  \r\n    \r\n    render(){\r\n        const { src , onHide , onSendBack } = this.props\r\n        const { crop , croppedImageUrl } = this.state\r\n        if(src){\r\n            return  <div className=\"modal-custom-wrap\">\r\n                        <div className=\"modal-custom-content\">\r\n                        <div className=\"modal-custom-image\">\r\n                            <ReactCrop\r\n                            src={src}\r\n                            crop={crop}\r\n                            onImageLoaded={this.onImageLoaded}\r\n                            onComplete={this.onCropComplete}\r\n                            onChange={this.onCropChange}\r\n                            />\r\n                        </div>\r\n                        <div className=\"modal-custom-buttons\">\r\n                            <button onClick={onHide}>取消</button>\r\n                            <button className={\"active\"} onClick={() => onSendBack(croppedImageUrl)}>\r\n                                保存\r\n                            </button>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n        }\r\n        return null\r\n    }\r\n}\r\nexport default Upload"]},"metadata":{},"sourceType":"module"}