{"ast":null,"code":"var _jsxFileName = \"/Users/cramj/Documents/New PWA/ubet-project (1)/src/component/Avatar/index.js\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport { map } from 'lodash';\nimport { avatarClass } from './options';\nimport Upload from './upload';\nimport { User, Transaction } from \"../../service\";\nimport { getAuthKey } from '../../util'; // CSS NAV\n\nconst Avatar = props => {\n  const {\n    show,\n    onHide,\n    Refresh\n  } = props;\n  const {\n    setUserAuthFN,\n    userAuth\n  } = useContext(User.Context);\n  const userData = User.read();\n  const [activeImg, setActiveImg] = useState(null);\n  const [imageSource, setImageSource] = useState(null);\n  useEffect(() => {\n    window.addEventListener(\"keydown\", event => {\n      if (event.keyCode === 27) {\n        setImageSource(null);\n        onHide();\n      }\n    });\n  }, []);\n\n  const onUpload = (obj, custom) => {\n    const data = new FormData();\n    data.append(\"file\", obj, \"sam.jpg\");\n    data.append(\"username\", userData.username);\n    data.append(\"account\", userData.account);\n    data.append(\"password\", userData.password);\n    data.append(\"auth\", getAuthKey());\n    data.append(\"type\", \"upload_pictures\");\n    const res = Transaction.read({\n      body: data,\n      type: \"upload_pictures\"\n    });\n    res.promise.then(r => {\n      console.log(\"Upload sucessful\", r);\n      Refresh();\n\n      if (custom) {\n        setImageSource(null);\n      }\n    }, e => {\n      console.log(\"Upload failed\", e);\n    });\n  };\n\n  const toDataURL = (url, callback) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.onload = function () {\n      callback(xhr.response);\n    };\n\n    xhr.open(\"GET\", url);\n    xhr.responseType = \"blob\";\n    xhr.send();\n  };\n\n  const onSetAvatar = (obj, i) => {\n    setActiveImg(i);\n    toDataURL(obj, newUrl => {\n      onUpload(newUrl);\n    });\n  };\n\n  const onSetCustomAvtr = obj => {\n    onUpload(obj, true);\n  };\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      if (e.target.files[0] > 200000) {\n        console.warn(\"File is too big!\");\n      } else {\n        const fileReader = new FileReader();\n\n        fileReader.onloadend = () => {\n          setImageSource(fileReader.result);\n        };\n\n        fileReader.readAsDataURL(e.target.files[0]);\n      }\n    }\n  };\n\n  if (show) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-avatar-wrap-desktop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-avatar-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-avatar-item-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, avatarClass && map(avatarClass, (obj, i) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: i,\n        className: \"nav-avatar-items\",\n        style: {\n          backgroundImage: `url(${obj.url})`\n        },\n        onClick: () => onSetAvatar(obj.url, i),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: `${activeImg === i ? 'show' : ''}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 45\n        }\n      }));\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      className: \"nav-avatar-items upload\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      onChange: onSelectFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"nav-avatar-overlay\",\n      onClick: onHide,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Upload, {\n      src: imageSource,\n      onHide: () => setImageSource(null),\n      onSendBack: onSetCustomAvtr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  return null;\n};\n\nexport default Avatar;","map":{"version":3,"sources":["/Users/cramj/Documents/New PWA/ubet-project (1)/src/component/Avatar/index.js"],"names":["React","useState","useEffect","useContext","ReactCrop","map","avatarClass","Upload","User","Transaction","getAuthKey","Avatar","props","show","onHide","Refresh","setUserAuthFN","userAuth","Context","userData","read","activeImg","setActiveImg","imageSource","setImageSource","window","addEventListener","event","keyCode","onUpload","obj","custom","data","FormData","append","username","account","password","res","body","type","promise","then","r","console","log","e","toDataURL","url","callback","xhr","XMLHttpRequest","onload","response","open","responseType","send","onSetAvatar","i","newUrl","onSetCustomAvtr","onSelectFile","target","files","length","warn","fileReader","FileReader","onloadend","result","readAsDataURL","backgroundImage"],"mappings":"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","sourcesContent":["import React , { useState , useEffect , useContext}  from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport { map} from 'lodash'\r\nimport { avatarClass } from './options'\r\nimport Upload from './upload'\r\nimport { User , Transaction} from \"../../service\";\r\nimport { getAuthKey } from '../../util';\r\n\r\n// CSS NAV\r\nconst Avatar = (props) =>{   \r\n    const { show , onHide , Refresh } = props\r\n    const { setUserAuthFN ,userAuth } = useContext(User.Context);\r\n\r\n    const userData = User.read();\r\n\r\n    const [ activeImg , setActiveImg ] = useState(null)\r\n    const [ imageSource, setImageSource] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener(\"keydown\", (event) =>{\r\n            if(event.keyCode === 27) {\r\n                setImageSource(null)\r\n                onHide()\r\n            }\r\n        });\r\n    },[])\r\n\r\n    const onUpload = (obj , custom) => {\r\n\r\n        const data = new FormData();\r\n        data.append(\"file\", obj, \"sam.jpg\");\r\n        data.append(\"username\", userData.username);\r\n        data.append(\"account\", userData.account);\r\n        data.append(\"password\", userData.password);\r\n        data.append(\"auth\", getAuthKey());\r\n        data.append(\"type\", \"upload_pictures\");\r\n        const res = Transaction.read({\r\n            body: data,\r\n            type: \"upload_pictures\",\r\n        });\r\n\r\n        res.promise.then((r) => {\r\n            console.log(\"Upload sucessful\", r);\r\n            Refresh()\r\n            if(custom){\r\n                setImageSource(null)\r\n            }\r\n            \r\n        },(e) => {\r\n            console.log(\"Upload failed\", e);\r\n        });\r\n    }\r\n\r\n    const toDataURL = (url, callback) => {\r\n        const xhr   = new XMLHttpRequest();\r\n        xhr.onload  = function () {\r\n            callback(xhr.response);\r\n        };\r\n        xhr.open(\"GET\", url);\r\n        xhr.responseType = \"blob\";\r\n        xhr.send();\r\n    }\r\n\r\n    const onSetAvatar = (obj , i) =>{\r\n        setActiveImg(i)\r\n        toDataURL(obj , newUrl =>{\r\n            onUpload(newUrl)\r\n        })\r\n    }\r\n\r\n\r\n    const onSetCustomAvtr = (obj) =>{\r\n        onUpload(obj , true)\r\n    }\r\n\r\n    const onSelectFile = e => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            if (e.target.files[0] > 200000) {\r\n                console.warn(\"File is too big!\");\r\n            } else {\r\n                const fileReader = new FileReader();\r\n                fileReader.onloadend = () => {\r\n                  setImageSource(fileReader.result);\r\n                };\r\n                fileReader.readAsDataURL(e.target.files[0]);\r\n            }\r\n        }\r\n    };\r\n\r\n    if(show){\r\n        return  <div className=\"nav-avatar-wrap-desktop\" >\r\n                    <div className=\"nav-avatar-content\">\r\n                    <div className=\"nav-avatar-item-wrap\">\r\n                        {\r\n                            avatarClass && map(avatarClass , (obj,i) =>{\r\n                                return  <div key={i} className=\"nav-avatar-items\" style={{ backgroundImage: `url(${obj.url})`}} onClick={() => onSetAvatar(obj.url , i)}>\r\n                                            <i className={`${activeImg === i ? 'show' : ''}`}/>\r\n                                        </div>\r\n                            })\r\n                        }\r\n                        <label  className=\"nav-avatar-items upload\">\r\n                            <input type=\"file\"  onChange={onSelectFile}/>\r\n                        </label>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"nav-avatar-overlay\" onClick={onHide} />\r\n                    <Upload src={imageSource}  onHide={() => setImageSource(null)} onSendBack={onSetCustomAvtr}/>\r\n\r\n                </div>\r\n    }\r\n    return null\r\n    \r\n\r\n}\r\n\r\nexport default Avatar"]},"metadata":{},"sourceType":"module"}